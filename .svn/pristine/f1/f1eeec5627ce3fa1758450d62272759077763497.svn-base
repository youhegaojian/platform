package com.example.demo.keyword;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import com.example.demo.domain.NationsDomain;
import com.example.demo.domain.ScheduleDomain;
import com.example.demo.utils.DateUtils;
import com.example.demo.utils.SqlUtils;

/** 
 * @author ALPHA.GJ
 * @date 创建时间：2019年3月22日 下午2:31:05 
 * @version 1.0 
 **/
public class NationExtract {
	
	KeywordsProcess kp_en = null;
	NationsDomain naMap = null;
	ScheduleDomain sche = null;

	public NationExtract() {
		kp_en = new KeywordsProcess("en");
		naMap = new NationsDomain();
		sche = new ScheduleDomain("006");
		
	}
	
	public NationExtract(String task_id) {
		kp_en = new KeywordsProcess("en");
		naMap = new NationsDomain();
		sche = new ScheduleDomain("006",task_id);
		
	}
	
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public boolean updateNation() {
		try {
			
			boolean succ = SqlUtils.prepareInsert(sche.getSche_list(), sche.getHeaders(), sche.getSche_table(), new String[] {"state"});
			if (succ) {
				System.out.println("-----调度任务表插入数据成功....");
			}
			
			System.out.println("-----nlp jar包加载完成，开始组织数据....");
			StringBuffer sql = new StringBuffer();
			sql.append("select id,user_id from apsc_kgo_link a where pl_type = '英文期刊论文' ")
//				.append(" and id = '201811211120040810000037' ")
				.append(" and exists (")
				.append(" select 1 from apsc_paper_analyse_organ b where a.id = b.uploadlog_id ")
				.append(" ) and not exists (")
				.append(" select 1 from apsc_task_detail_schedule b ,apsc_task_schedule c ")
				.append(" where b.task_id = c.task_id and a.id = b.file_id and b.type='006' and c.type='006' and c.state='4')");
			List<Map> kgoList = SqlUtils.query(sql.toString());
			
			for (int i = 0, len = kgoList.size(); i < len; i++) {
				System.out.println("-----当前时间为："+DateUtils.getCurrDateTimeStr());
				System.out.println("-----开始组织 id:"+kgoList.get(i).get("id").toString()+" 的数据....");
				sql = new StringBuffer();
				sql.append("select id,paper_id,uploadlog_id,organ from apsc_paper_analyse_organ ")
					.append(" where uploadlog_id = '")
					.append(kgoList.get(i).get("id").toString())
					.append("' and organ != '' and organ is not null ")
//					.append(" and organ not like '%USA%' and nation_region = 'USA'")
					;

				List<Map> list = SqlUtils.query(sql.toString());
				if (list != null && list.size()>0) {
					sche.getDetail_sche_list().get(0).put("file_id", kgoList.get(i).get("id").toString());
					sche.getDetail_sche_list().get(0).put("sum_rec", list.size());
					sche.getDetail_sche_list().get(0).put("tab_name", "apsc_paper_analyse_organ");
					sche.getDetail_sche_list().get(0).put("user_id",kgoList.get(i).get("user_id"));
					succ = SqlUtils.prepareInsert(sche.getDetail_sche_list(), sche.getDetail_headers(),
							sche.getDetail_table(), null);
					if (succ) {
						System.out.println("-----------调度任务明细表插入数据成功...");
					}
					
					System.out.println("-----当前任务的数据量为："+list.size());
					
					int leng = list.size();
					int offset = 100;
					int n = leng / offset;
					int y = leng % offset;
					if (y != 0) {
						n = n + 1;
					}
					
					String[] headers = new String[] { "id","paper_id","uploadlog_id", "nation_region" };
					String[] colus = new String[] { "nation_region" };
					String tabname = "apsc_paper_analyse_organ";
					
					if (leng > offset) {					
						List<Map> _list = null;
						String[] cols = new String[] { "finish_rec" };
						boolean suc;
						
						for (int j = 0; j < n; j++) {
							int end = ((j + 1) * offset) > leng ? leng : ((j + 1) * offset);
							_list = list.subList(j * offset, end);
							System.out.println("-------开始时间" + (j+1) + ": " + new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()));
							_list = getList(_list);
							System.out.println("-------结束时间" + (j+1) + ": " + new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()));
							System.out.println();
							String insert_sql = SqlUtils.sqlMake(_list, headers, tabname, colus);
//							System.out.println("insert_sql :"+insert_sql);
							if(SqlUtils.insert(insert_sql)) {
								
								sche.getDetail_sche_list().get(0).put("finish_rec", end);
								suc = SqlUtils.prepareInsert(sche.getDetail_sche_list(), sche.getDetail_headers(),
										sche.getDetail_table(), cols);
								if (suc) {
									System.out.println("----id:" + sche.getDetail_sche_list().get(0).get("task_id")
											+ "更新已完成记录数成功...");
								}
								
								System.out.println("---id:"+kgoList.get(i).get("id").toString()+"插入数据 前" + end + "条成功！");
							};
						}
						
						cols = new String[] { "end_time" };
						sche.getDetail_sche_list().get(0).put("end_time", DateUtils.getCurrDateTimeStr());
						suc = SqlUtils.prepareInsert(sche.getDetail_sche_list(), sche.getDetail_headers(),
								sche.getDetail_table(), cols);
						if (suc) {
							System.out.println("-------更新完成时间成功...");
						}
					} else {
						list = getList(list);
						String insert_sql = SqlUtils.sqlMake(list, headers, tabname, colus);
						if(SqlUtils.insert(insert_sql)) {
							
							String[] cols = new String[] { "finish_rec", "end_time" };
							sche.getDetail_sche_list().get(0).put("finish_rec", list.size());
							sche.getDetail_sche_list().get(0).put("end_time", DateUtils.getCurrDateTimeStr());
							boolean suc = SqlUtils.prepareInsert(sche.getDetail_sche_list(), sche.getDetail_headers(),
									sche.getDetail_table(), cols);
							if (suc) {
								System.out.println(
										"----id:" + sche.getDetail_sche_list().get(0).get("task_id") + "更新已完成记录数成功...");
							}
							
							System.out.println("---id:"+kgoList.get(i).get("id").toString()+" 插入数据完成！");
						};
					}
				}
			}
			
			sche.getSche_list().get(0).put("state", "4");
			sche.getSche_list().get(0).put("end_time", DateUtils.getCurrDateTimeStr());
			succ = SqlUtils.prepareInsert(sche.getSche_list(), sche.getHeaders(), sche.getSche_table(),
					new String[] { "end_time", "state" });
			if (succ) {
				System.out.println("--------更新完成时间成功！");
			}
			
			System.out.println("---插入数据 全部完成！");
			System.out.println("-----当前时间为："+DateUtils.getCurrDateTimeStr());
			return true;
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}
	
	public List<Map> getList(List<Map> list) {
			for (int i = 0; i < list.size(); i++) {
				System.out.println("----第"+(i+1)+"条---开始时间: " + new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()));
				List<String> nations = kp_en.NationExtract(list.get(i).get("organ").toString());
				String nation = "US";
				if (nations.size() > 0) {
					nation = nations.get(0);
					if(naMap.getList_cn().contains(nation.toLowerCase())) {
						nation = naMap.getCHINA();
					}else if(naMap.getList_us().contains(nation.toLowerCase())){
						nation = naMap.getUS();
					}
					
					if(nations.containsAll(naMap.getList_africa())) {
						nation = naMap.getAFRICA();
					}else if(nations.containsAll(naMap.getList_arab())) {
						nation = naMap.getARAB();
					}else if(nations.containsAll(naMap.getList_britain())) {
						nation = naMap.getBRITAIN();
					}else if(nations.containsAll(naMap.get_list_cn())) {
						nation = naMap.getCHINA();
					}else if(nations.containsAll(naMap.getList_ire())) {
						nation = naMap.getIRE();
					}else if(nations.containsAll(naMap.getList_kingdom())) {
						nation = naMap.getBRITAIN();
					}else if(nations.containsAll(naMap.getList_korea())) {
						nation = naMap.getKOREA();
					}else if(nations.containsAll(naMap.getList_macedonia())) {
						nation = naMap.getMACEDONIA();
					}else if(nations.containsAll(naMap.getList_new())) {
						nation = naMap.getNEWZEALAND();
					}else if(nations.containsAll(naMap.getList_serbia())) {
						nation = naMap.getSERBIA();
					}else if(nations.containsAll(naMap.getList_south_korea())) {
						nation = naMap.getSOUTHKOREA();
					}else if(nations.containsAll(naMap.getList_turkey())) {
						nation = naMap.getTURKEY();
					}else if(nations.containsAll(naMap.getList_us())) {
						nation = naMap.getUS();
					}
					
				}							
				list.get(i).put("nation_region", nation);	
				System.out.println("----第"+(i+1)+"条---结束时间: " + new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()));
			}
			return list;
		}

	
	public static void main(String[] args) {
		NationExtract obj = new NationExtract();
		obj.updateNation();
	}
}
