package com.liming.keyword;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;

import com.liming.domain.ApscKgoLink;
import com.liming.domain.ApscPaperAnalyse;
import com.liming.domain.ApscPaperAnalyseExt;
import com.liming.domain.ApscTaskDetailSchedule;
import com.liming.domain.ApscTaskSchedule;
import com.liming.domain.ConfDomain;
import com.liming.service.ApscPaperAnalyseService;
import com.liming.service.ApscTaskDetailScheduleService;
import com.liming.service.ApscTaskScheduleService;
import com.liming.utils.DateUtils;
import com.liming.utils.TextRankProcess;
import com.liming.service.ApscKgoLinkService;
import com.liming.service.ApscPaperAnalyseExtService;
import com.liming.utils.*;
import java.text.SimpleDateFormat;

/** 					论文 
 *    	执行论文关键字提取之前，执行下面的SQL：
 * update  apsc_paper_analyse set summary=replace(summary,' ','')  //**在数据库中把'口'型替换为空**
 * @author lcb
 */
public class InsertKeywordOfPaper {
//	Calendar c = Calendar.getInstance();
//	ScheduleDomain sche = null;
	@Autowired
	ApscPaperAnalyseService  apscAnalysisPaperService;
	@Autowired
	ApscPaperAnalyseExtService  apscPaperAnalyseExtService;
	@Autowired
	ApscKgoLinkService  apscKgoLinkService;
	@Autowired
	private ApscTaskScheduleService apscScheduleService;
	@Autowired
	private ApscTaskDetailScheduleService apscTaskDetailScheduleService;
	
	ApscKgoLink apscKgoLink=null;
	ApscTaskSchedule apscTaskSchedule = null;
	ApscTaskDetailSchedule apscTaskDetailSchedule=null;
	public InsertKeywordOfPaper(String task_id) {
//		sche = new ScheduleDomain("002", task_id);
		apscTaskSchedule=new ApscTaskSchedule("002",task_id);
		apscKgoLink=new ApscKgoLink();
	}

	@SuppressWarnings({ "unchecked" })
	public boolean insertKeyword(String taskid) throws IOException {
		try {
		//查出基金表数据
		ConfDomain ConfDomain=new ConfDomain();
		String date=ConfDomain.getPaper_date();
		SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		apscKgoLink.setDownloadTime(df.parse(date));
		apscKgoLink.setId(taskid);
		List<ApscKgoLink> list=apscKgoLinkService.getlistofpaper(apscKgoLink);

        boolean  flag=false;
	        
        for (int j = 0; j < list.size(); j++) {
			String pl_type=list.get(j).getPlType();
			String id=list.get(j).getId();
			int paper_analyseCount=apscAnalysisPaperService.getCount(id);
			int paper_analyse_extCount=apscPaperAnalyseExtService.getCount(id);
		    if (paper_analyseCount==paper_analyse_extCount) {
				continue;
			}else {//先删再插
				apscPaperAnalyseExtService.delete(id);
				List<ApscPaperAnalyse> paper_analyseList=apscAnalysisPaperService.getList(id);
			    
			    //先查数据库有无此记录，有则删除，无则新增,查询条件-id，时间
				apscTaskSchedule.setState("2");
				apscScheduleService.update(apscTaskSchedule);
				apscTaskDetailSchedule=new ApscTaskDetailSchedule(taskid, DateUtils.getCurrDateTimeStr(), "002");
				apscTaskDetailSchedule.setSumRec(paper_analyseList.size());
				apscTaskDetailSchedule.setFileId(id);
				apscTaskDetailSchedule.setTabName("apsc_paper_analyse_ext");
				apscTaskDetailSchedule.setUserId(list.get(j).getUserId());
				apscTaskDetailScheduleService.insert(apscTaskDetailSchedule);
				
			    //每offset条插一次
			    if (paper_analyseList != null && paper_analyseList.size()>0) {
					int length = paper_analyseList.size();
					int offset = ConfDomain.getPaper_limit();//1000
					int n = length/offset;
					int y = length%offset;
					if(y!=0) {
						n=n+1;
					}
					if(length<=offset) {
						add(paper_analyseList,apscTaskDetailSchedule,pl_type);
						System.out.println("---------插入 >> "+0+"----"+length*2+"<< ------------");
						//System.out.println(sql);
					}else {
						List<ApscPaperAnalyse> _list = null;
						for(int i=0;i<n;i++) {
							int end = ((i+1)*offset)>length?length:((i+1)*offset);
							_list = (paper_analyseList).subList(i*offset, end);
							add(_list,apscTaskDetailSchedule,pl_type);
							//System.out.println(sql);
							System.out.println("---------插入 >> "+i*offset*2+"----"+end*2+"<< ------------");
						}
					}
				}
			    apscTaskSchedule.setEndTime(DateUtils.getCurrDateTimeStr());
			    apscTaskSchedule.setState("4");
			    apscTaskSchedule.setTaskId(apscTaskDetailSchedule.getTaskId());;
			    apscScheduleService.update(apscTaskSchedule);
			  
			    apscTaskDetailSchedule.setEndTime(DateUtils.getCurrDateTimeStr());
			    apscTaskDetailSchedule.setTaskId(apscTaskDetailSchedule.getTaskId());
			    apscTaskDetailSchedule.setFileId(apscTaskDetailSchedule.getFileId());
			    apscTaskDetailScheduleService.update(apscTaskDetailSchedule);
			    flag=true;
			  }
			}
        if (!flag) {
        	apscTaskSchedule.setTaskId(apscTaskDetailSchedule.getTaskId());
        	apscScheduleService.delete(apscTaskSchedule);
		}
        return true;
		} catch (Exception e) {
			apscTaskSchedule.setState("3");
			apscScheduleService.update(apscTaskSchedule);
			e.printStackTrace();
			return false;
		}
    }
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public void add(List<ApscPaperAnalyse> _list,ApscTaskDetailSchedule apscTaskDetailSchedule, String pl_type) throws IOException {
		 if (_list.size()>0) {
	        	List<ApscPaperAnalyseExt> newlist=new ArrayList<>();
	        	List<ApscPaperAnalyseExt> newlist2=new ArrayList<>();
	            //更新数据
	            for (ApscPaperAnalyse apscPaperAnalyse: _list) {
	            	if (((String)apscPaperAnalyse.getSummary())==null) {
	            		apscPaperAnalyse.setSummary("");
	        		}
	            	if (((String)apscPaperAnalyse.getTitle())==null) {
	            		apscPaperAnalyse.setTitle("");;
	            	}
	            	if (((String)apscPaperAnalyse.getWosid())==null) {
	            		apscPaperAnalyse.setWosid("");
	            	}
	            	if (((String)apscPaperAnalyse.getMainHeading())==null) {
	            		apscPaperAnalyse.setMainHeading("");
	            	}
	    			String title=apscPaperAnalyse.getTitle().toString().equals(" ")?"":apscPaperAnalyse.getTitle().toString().replace("。", "").replace(".", "").replace("；", ";").replace("'", "").replace("’", "").trim();//调用取值方法,得到的数据赋给其他字段
	    			String abstract_=apscPaperAnalyse.getSummary().toString().equals(" ")?"":apscPaperAnalyse.getSummary().toString().replace("。", "").replace(".", "").replace("；", ";").replace("'", "").replace("’", "").trim();;
	    			String wosid=apscPaperAnalyse.getWosid().toString().trim();
	    			String main_heading=apscPaperAnalyse.getMainHeading().toString().trim();
	    			abstract_=abstract_.replaceAll(",", ".");
	    			abstract_=abstract_.replaceAll("\\ ","");
	    			title=title.replaceAll("\\ ","").replaceAll("\\\\","");
	    			abstract_=abstract_.replaceAll("\\?","").replaceAll("\\\\","");
	    			if (abstract_.equals(" ")) {
	   				 abstract_=abstract_.replace(" ","");
	    			}
	    			
	    			//生成停止词
	    			main_heading=main_heading.replace("|", ";");
	    			String[] de2array= main_heading.split(";");
	    			String[] dearray= wosid.split(";");
	    			Set<String> stopwords=new HashSet<>();
    		        for (String string : dearray) {
    					stopwords.add(string.toLowerCase());
    				}
    		        for (String string : de2array) {
    		        	stopwords.add(string.toLowerCase());
    		        }
	    		        
	    			String title2="";
	    	        String abstract_2="";
	    	        List<String> documents_tit = new ArrayList<>();//存放被提取的对象
    		        documents_tit.add(title);
		   	        List<String> documents_ab = new ArrayList<>();//存放被提取的对象
		   	        documents_ab.add(abstract_);
    		        List<Set<String>> final_keywords_tit_cn = null;//存放提取结果
	    			//获取标题-中文关键字--必须先中文后英文  'WOS','中文期刊论文','学位论文','会议论文','英文期刊论文','endnote','noteexpress','refworks'
    		        if (pl_type.trim().equals("中文期刊论文")) {
    	    			if (!title.trim().equals("")) {
		    				TextRankProcess trprocess_tit_cn = null;
				   	        trprocess_tit_cn = new TextRankProcess(Constants.LANGUAGE.CN, 2, 6,0,stopwords);
		    				final_keywords_tit_cn = trprocess_tit_cn.calculateTextRank2(documents_tit);
		    				for(String b : final_keywords_tit_cn.get(0)) {
				   	        	title2+=b+",";
				   	        }
		    				if (!title2.equals("")) {
								title2=title2.substring(0, title2.length()-1);
		    				}
    	    			}
    	    			//去除存在的关键字
    	    			String[] aarray= title2.split(",");
        		        for (String string : aarray) {
        					stopwords.add(string.toLowerCase());
        				}
        	  			//获取摘要-中文关键字--必须先中文后英文
    	    			if (!abstract_.trim().equals("")) {
    	    				TextRankProcess trprocess_tit_cn = null;
    			   	        trprocess_tit_cn = new TextRankProcess(Constants.LANGUAGE.CN, 2, 6,0,stopwords);
    	    				final_keywords_tit_cn = trprocess_tit_cn.calculateTextRank2(documents_ab);
    	    				for(String b : final_keywords_tit_cn.get(0)) {
    	    					abstract_2+=b+",";
    			   	        }
    	    				if (!abstract_2.equals("")) {
    	    					abstract_2=abstract_2.substring(0, abstract_2.length()-1);
    	    				}
    	    			}
					}else {
						//获取标题-英文关键字
		    			if (!title.trim().equals("")) {
		    				TextRankProcess trprocess_tit_en = null;
		    				trprocess_tit_en = new TextRankProcess(Constants.LANGUAGE.EN, 2, 5,0,stopwords);
		    				final_keywords_tit_cn = trprocess_tit_en.calculateTextRank2(documents_tit);
		    				for(String b : final_keywords_tit_cn.get(0)) {
				   	        	title2+=b+",";
				   	        }
		    				if (!title2.equals("")) {
								title2=title2.substring(0, title2.length()-1);
		    				}
		    			}
		    			//去除存在的关键字
    	    			String[] aarray= title2.split(",");
        		        for (String string : aarray) {
        					stopwords.add(string.toLowerCase());
        				}
    	    			//获取摘要-英文关键字
    	    			if (!abstract_.trim().equals("")) {
    	    				TextRankProcess trprocess_tit_en = null;
    	    				trprocess_tit_en = new TextRankProcess(Constants.LANGUAGE.EN, 2, 5,0,stopwords);
    	    				final_keywords_tit_cn = trprocess_tit_en.calculateTextRank2(documents_ab);
    	    				for(String b : final_keywords_tit_cn.get(0)) {
    	    					abstract_2+=b+",";
    			   	        }
    	    				if (!abstract_2.equals("")) {
    	    					abstract_2=abstract_2.substring(0, abstract_2.length()-1);
    	    				}
    	    			}
        		        
					}
    		        ApscPaperAnalyseExt apscPaperAnalyseExt=new ApscPaperAnalyseExt(); 
    		        ApscPaperAnalyseExt apscPaperAnalyseExt2=new ApscPaperAnalyseExt(); 
    		        apscPaperAnalyseExt.setUploadlogid(apscPaperAnalyse.getUploadlogid());
    		        apscPaperAnalyseExt.setPaperId(apscPaperAnalyse.getId());
    		        apscPaperAnalyseExt.setExtName("title_keywords");
    		        apscPaperAnalyseExt.setExtVal(title2);
	    			newlist.add(apscPaperAnalyseExt);
	    			apscPaperAnalyseExt2.setUploadlogid(apscPaperAnalyse.getUploadlogid());
	    			apscPaperAnalyseExt2.setPaperId(apscPaperAnalyse.getId());
	    			apscPaperAnalyseExt2.setExtName("abstract_keywords");
	    			apscPaperAnalyseExt2.setExtVal(abstract_2);
	    			newlist2.add(apscPaperAnalyseExt2);
	    		}
	            //插入数据库
	            apscPaperAnalyseExtService.insert(newlist);
	            apscPaperAnalyseExtService.insert(newlist);
	            
	            List<ApscTaskDetailSchedule> clist2=apscTaskDetailScheduleService.getList(apscTaskDetailSchedule);
	            int c2=Integer.parseInt(clist2.get(0).getFinishRec().toString())+ newlist.size();
	            apscTaskDetailSchedule.setFinishRec(c2);
	            apscTaskDetailScheduleService.update(apscTaskDetailSchedule);
			    
			}
	}

}
