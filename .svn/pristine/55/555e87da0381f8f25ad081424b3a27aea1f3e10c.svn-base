package com.liming.keyword;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.springframework.context.annotation.AnnotationConfigApplicationContext;

import com.liming.domain.ApscKgoLink;
import com.liming.domain.ApscPaperAnalyse;
import com.liming.domain.ApscPaperAnalyseExt;
import com.liming.domain.ApscTaskDetailSchedule;
import com.liming.domain.ApscTaskSchedule;
import com.liming.domain.ConfDomain;
import com.liming.domain.ElConfig;
import com.liming.service.ApscPaperAnalyseService;
import com.liming.service.ApscTaskDetailScheduleService;
import com.liming.service.ApscTaskScheduleService;
import com.liming.service.ApscKgoLinkService;
import com.liming.service.ApscPaperAnalyseExtService;
import com.liming.utils.*;
import java.text.SimpleDateFormat;

/** 					论文 
 *    	执行论文关键字提取之前，执行下面的SQL：
 * update  apsc_paper_analyse set summary=replace(summary,' ','')  //**在数据库中把'口'型替换为空**
 * @author lcb
 */
public class InsertKeywordOfPaper {
	
	private ApscPaperAnalyseService  apscAnalysisPaperService = SpringUtils.getBean(ApscPaperAnalyseService.class);

	private ApscPaperAnalyseExtService  apscPaperAnalyseExtService = SpringUtils.getBean(ApscPaperAnalyseExtService.class);

	private ApscKgoLinkService  apscKgoLinkService = SpringUtils.getBean(ApscKgoLinkService.class);

	private ApscTaskScheduleService apscScheduleService = SpringUtils.getBean(ApscTaskScheduleService.class);
	
	private ApscTaskDetailScheduleService apscTaskDetailScheduleService = SpringUtils.getBean(ApscTaskDetailScheduleService.class);
	
	private ApscKgoLink apscKgoLink=null;
	
	private ApscTaskSchedule apscTaskSchedule = null;
	
	private ApscTaskDetailSchedule apscTaskDetailSchedule=null;
	
	TextRankProcess trprocess_tit_cn = null;
	
	TextRankProcess trprocess_tit_en = null;
	
	public InsertKeywordOfPaper(ApscTaskSchedule taskSchedule) {
		trprocess_tit_cn = new TextRankProcess(Constants.LANGUAGE.CN, 2, 6, 10,0.0001,100);
		trprocess_tit_en = new TextRankProcess(Constants.LANGUAGE.EN, 2, 5, 10,0.0001,100); 
		apscTaskSchedule = taskSchedule;
		apscTaskDetailSchedule=new ApscTaskDetailSchedule(apscTaskSchedule.getTaskId(), DateUtils.getCurrDateTimeStr(), "002");
		apscKgoLink = new ApscKgoLink();
	}

	@SuppressWarnings({ "unchecked" })
	public boolean insertKeyword(ApscTaskSchedule apscTaskSchedule) throws IOException {
		try {
		//查出基金表数据
		ConfDomain ConfDomain=new ConfDomain();
		String date=ConfDomain.getPaper_date();
		SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		apscKgoLink.setDownloadTime(df.parse(date));
		apscKgoLink.setId(apscTaskSchedule.getTaskid());
		List<ApscKgoLink> kgoList = apscKgoLinkService.getPaperList(apscKgoLink);

        //先查数据库有无此记录，有则删除，无则新增,查询条件-id，时间
        apscTaskSchedule.setState("2");
        apscScheduleService.update(apscTaskSchedule);
	        
        for (int j = 0; j < kgoList.size(); j++) {
			String pl_type=kgoList.get(j).getPlType().trim();
			String id=kgoList.get(j).getId();			
			
			apscPaperAnalyseExtService.deletePaperAnalyseExt(id);
			
//			apscAnalysisPaperService.updateSpecialChars(id);
			
			int count = apscAnalysisPaperService.getPaperListCount(id);
			int p = count/10000;
			int m = count%10000;
			if (m != 0) {
				p = p + 1;
			}
			System.out.println("--------paperListCount-----"+count+"-------页数---"+p);
			
			int num = 0;
			for (int pageSize = 0; pageSize < p; pageSize++) {
				List<ApscPaperAnalyse> paper_analyseList=apscAnalysisPaperService.getPaperList(id, pageSize * 10000);
				
				if (paper_analyseList.size() > 0) {
					if (pageSize == 0) {
						//paper_analyseList长度>0，往作业调度明细表中插一条数据，若=0，没有意义
						apscTaskDetailSchedule.setSumRec(count);
						apscTaskDetailSchedule.setFileId(id);
						apscTaskDetailSchedule.setTabName("apsc_paper_analyse_ext");
						apscTaskDetailSchedule.setUserId(kgoList.get(j).getUserId());
						apscTaskDetailSchedule.setBeginTime(DateUtils.getCurrDateTimeStr());
						if (apscTaskDetailSchedule.getFinishRec() > 0) {
							apscTaskDetailSchedule.setFinishRec(0);
						}
						apscTaskDetailScheduleService.insert(apscTaskDetailSchedule);
					}
					
					//每offset条插一次
					if (paper_analyseList != null && paper_analyseList.size()>0) {
						int length = paper_analyseList.size();
						int offset = 1000;//1000
						int n = length/offset;
						int y = length%offset;
						if(y != 0) {
							n = n + 1;
						}
						
						if(length > offset) {
							List<ApscPaperAnalyse> _list = null;
							for(int i = 0; i < n; i++) {
								int end = ((i + 1) * offset) > length ? length : ((i + 1) * offset);
								_list = (paper_analyseList).subList(i * offset, end);
								num = pageSize * 10000 + end;
								add(_list, apscTaskDetailSchedule, pl_type, num);
								System.out.println("---------插入 >> "+(i*offset+pageSize * 10000)+"----"+num+"<< ------------");
							}
						}else {
							add(paper_analyseList, apscTaskDetailSchedule, pl_type, num + length);
							System.out.println("---------插入 >> "+num+"----"+(num + length)+"<< ------------");
						}
					}
					
					apscTaskDetailSchedule.setEndTime(DateUtils.getCurrDateTimeStr());
					apscTaskDetailScheduleService.update(apscTaskDetailSchedule);
				}
			}
			
        }
        setTaskState("4");
			
        return true;
		} catch (Exception e) {
			setTaskState("3");
			
			e.printStackTrace();
			return false;
		}
    }
	
	public void setTaskState(String state) {
		apscTaskSchedule.setEndTime(DateUtils.getCurrDateTimeStr());
		apscTaskSchedule.setState(state);
		apscTaskSchedule.setTaskId(apscTaskDetailSchedule.getTaskId());
		apscScheduleService.update(apscTaskSchedule);
	}
	
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public void add(List<ApscPaperAnalyse> _list,ApscTaskDetailSchedule apscTaskDetailSchedule, String pl_type, int length) throws IOException {
		 if (_list.size()>0) {
	        	List<ApscPaperAnalyseExt> paperlist=new ArrayList<>();
	        	List<ApscPaperAnalyseExt> paperlist2=new ArrayList<>();
	        	
	        	List<String> documents_tit = new ArrayList<>();//存放被提取的对象
	        	List<String> documents_ab = new ArrayList<>();//存放被提取的对象
	        	
	        	String title = "";
	        	String abstract_ = "";
	        	
	            //更新数据
	            for (ApscPaperAnalyse apscPaperAnalyse: _list) {
	            	if ((apscPaperAnalyse.getSummary()) == null) {
	            		apscPaperAnalyse.setSummary("");
	        		}
	            	if ((apscPaperAnalyse.getTitle()) == null) {
	            		apscPaperAnalyse.setTitle("");
	            	}
	            	
	            	title = apscPaperAnalyse.getTitle().trim();
	    			abstract_ = apscPaperAnalyse.getSummary().trim();
	            	
//	    			title = apscPaperAnalyse.getTitle().equals(" ")?"":apscPaperAnalyse.getTitle().replace("。", "").replace(".", "").replace("；", ";").replace("'", "").replace("’", "").trim();//调用取值方法,得到的数据赋给其他字段
//	    			abstract_ = apscPaperAnalyse.getSummary().equals(" ")?"":apscPaperAnalyse.getSummary().toString().replace("。", "").replace(".", "").replace("；", ";").replace("'", "").replace("’", "").trim();
//	    			abstract_ = abstract_.replaceAll(",", ".");
	    			abstract_ = abstract_.replaceAll("\\ ","");
	    			abstract_ = abstract_.replaceAll("\\?","").replaceAll("\\\\","");
	    			
	    			title=title.replaceAll("\\ ","").replaceAll("\\\\","");
	    			
	    			if (" ".equals(abstract_)) {
		   				 abstract_ = abstract_.replace(" ","");
		    		}
	    			
	    			title = RegexpFilter.stringFilter(title);
	    			abstract_ = RegexpFilter.stringFilter(abstract_);
	    			
	    	        if (!"".equals(title.trim())) {
	    	        	documents_tit.add(title);
	    	        } else {
		   	        	documents_tit.add("NULL");
		   	        }
		   	        
		   	        if (!"".equals(abstract_.trim())) {
		   	        	documents_ab.add(abstract_);
		   	        } else {
		   	        	documents_ab.add("NULL");
		   	        }
	    		}
	            
	            List<Set<String>> final_keywords_tit_cn = null;
	            List<Set<String>> final_keywords_ab_cn = null;
	            List<Set<String>> final_keywords_tit_en = null;
	            List<Set<String>> final_keywords_ab_en = null;
		        if ("中文期刊论文".equals(pl_type) || "endnote".equals(pl_type) || "noteexpress".equals(pl_type) || "refworks".equals(pl_type)) {
		        	final_keywords_tit_cn = generateCNTitleKeywords(documents_tit);
		        	final_keywords_ab_cn = generateCNAbstractKeywords(documents_ab);
		        	for (int i=0; i<final_keywords_tit_cn.size(); i++) {
		        		List<ApscPaperAnalyseExt> paperlistTitle = getPaperListTile(final_keywords_tit_cn.get(i), _list.get(i));
		        		List<ApscPaperAnalyseExt> paperlistAbstract = getPaperListAbstract(final_keywords_ab_cn.get(i), _list.get(i));
		        		paperlist.addAll(paperlistTitle);
		        		paperlist2.addAll(paperlistAbstract);
		        	}
				}else {
					final_keywords_tit_en = generateENTitleKeywords(documents_tit);
					final_keywords_ab_en = generateENAbstractKeywords(documents_ab);
					for (int i=0; i<final_keywords_tit_en.size(); i++) {
		        		List<ApscPaperAnalyseExt> paperlistTitle = getPaperListTile(final_keywords_tit_en.get(i), _list.get(i));
		        		List<ApscPaperAnalyseExt> paperlistAbstract = getPaperListAbstract(final_keywords_ab_en.get(i), _list.get(i));
		        		paperlist.addAll(paperlistTitle);
		        		paperlist2.addAll(paperlistAbstract);
		        	}
				}
		        
	            //插入数据库
		        if (paperlist.size() > 0) {
		        	apscPaperAnalyseExtService.insertPaperAnalyseExtList(paperlist);
		        }
		        if (paperlist2.size() > 0) {
		        	apscPaperAnalyseExtService.insertPaperAnalyseExtList(paperlist2);
		        }
	            apscTaskDetailSchedule.setFinishRec(length);
	            apscTaskDetailScheduleService.update(apscTaskDetailSchedule);
			    
			}
	}
	
	public List<Set<String>> generateCNTitleKeywords(List<String> documents_tit) {
		List<Set<String>> final_keywords_tit_cn = null;//存放提取结果
		//获取标题-中文关键字--必须先中文后英文  'WOS','中文期刊论文','学位论文','会议论文','英文期刊论文','endnote','noteexpress','refworks'
		final_keywords_tit_cn = trprocess_tit_cn.calculateTextRank2(documents_tit, stopwords());
		return final_keywords_tit_cn;
	}
	
	public List<Set<String>> generateCNAbstractKeywords(List<String> documents_ab) {
		List<Set<String>> final_keywords_ab_cn = trprocess_tit_cn.calculateTextRank2(documents_ab, stopwords());
		return final_keywords_ab_cn;
	}
	
	public List<Set<String>> generateENTitleKeywords(List<String> documents_tit) {
		List<Set<String>> final_keywords_tit_en = null;//存放提取结果
		final_keywords_tit_en = trprocess_tit_en.calculateTextRank2(documents_tit, stopwords());
		return final_keywords_tit_en;
	}
	
	public List<Set<String>> generateENAbstractKeywords(List<String> documents_ab) {
		List<Set<String>> final_keywords_ab_en = trprocess_tit_en.calculateTextRank2(documents_ab, stopwords());
		return final_keywords_ab_en;
	}

	public List<ApscPaperAnalyseExt> getPaperListTile(Set<String> titleSet, ApscPaperAnalyse apscPaperAnalyse) {
		List<ApscPaperAnalyseExt> paperlist_title=new ArrayList<>();		
		String wosid = apscPaperAnalyse.getWosid() == null ? "" : apscPaperAnalyse.getWosid().trim();
		String main_heading = apscPaperAnalyse.getMainHeading() == null ? "" : apscPaperAnalyse.getMainHeading().trim();
		String wosidArr[] = wosid.split(";");
		String main_headingArr[] = main_heading.split(";|\\|");
		titleSet.removeAll(Arrays.asList(wosidArr));
		titleSet.removeAll(Arrays.asList(main_headingArr));
		for (String arr : titleSet) {
        	ApscPaperAnalyseExt apscPaperAnalyseExt=new ApscPaperAnalyseExt(); 
        	apscPaperAnalyseExt.setUploadlogid(apscPaperAnalyse.getUploadlogid());
        	apscPaperAnalyseExt.setPaperId(apscPaperAnalyse.getId());
        	apscPaperAnalyseExt.setExtName("title_keywords");
        	apscPaperAnalyseExt.setExtVal(arr);
        	paperlist_title.add(apscPaperAnalyseExt); 
        }
		return paperlist_title;
	}
	
	public List<ApscPaperAnalyseExt> getPaperListAbstract(Set<String> abstractSet, ApscPaperAnalyse apscPaperAnalyse) {	
		List<ApscPaperAnalyseExt> paperlist_abstract=new ArrayList<>();
		String wosid = apscPaperAnalyse.getWosid() == null ? "" : apscPaperAnalyse.getWosid().trim();
		String main_heading = apscPaperAnalyse.getMainHeading() == null ? "" : apscPaperAnalyse.getMainHeading().trim();
		String wosidArr[] = wosid.split(";");
		String main_headingArr[] = main_heading.split(";|\\|");
		abstractSet.removeAll(Arrays.asList(wosidArr));
		abstractSet.removeAll(Arrays.asList(main_headingArr));
		for (String abstractStr : abstractSet) {
			ApscPaperAnalyseExt apscPaperAnalyseExt2=new ApscPaperAnalyseExt(); 
			apscPaperAnalyseExt2.setUploadlogid(apscPaperAnalyse.getUploadlogid());
			apscPaperAnalyseExt2.setPaperId(apscPaperAnalyse.getId());
			apscPaperAnalyseExt2.setExtName("abstract_keywords");
			apscPaperAnalyseExt2.setExtVal(abstractStr);
			paperlist_abstract.add(apscPaperAnalyseExt2);	
		}
		return paperlist_abstract;
	}
	public Set<String> stopwords() {
		Set<String> set = new HashSet<>();
		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ElConfig.class);
		ElConfig resourceService = context.getBean(ElConfig.class);
		set = resourceService.outputResource();
		context.close();
		return set;
	}
	public static  void main(String[] args) {
		Set<String> set = new HashSet<>();
		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ElConfig.class);
		ElConfig resourceService = context.getBean(ElConfig.class);
		set = resourceService.outputResource();
		context.close();
    	System.out.println(String.join("|", set));
	}
	
}
