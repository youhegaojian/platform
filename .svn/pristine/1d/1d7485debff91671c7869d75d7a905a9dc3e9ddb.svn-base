package com.liming.keyword;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.liming.domain.ApscResearchProjectData;
import com.liming.domain.ApscTaskDetailSchedule;
import com.liming.domain.ApscTaskSchedule;
import com.liming.domain.ConfDomain;
import com.liming.service.ApscResearchProjectDataService;
import com.liming.service.ApscTaskDetailScheduleService;
import com.liming.service.ApscTaskScheduleService;
import com.liming.utils.*;

/**
 *	要执行的任务
 * @author lcb
 */
public class InsertKeywordOfProtect {
	
	Calendar c = Calendar.getInstance();
	
	private ApscTaskScheduleService apscScheduleService = SpringUtils.getBean(ApscTaskScheduleService.class);
	
	private ApscTaskDetailScheduleService apscTaskDetailScheduleService = SpringUtils.getBean(ApscTaskDetailScheduleService.class);
	
	private ApscResearchProjectDataService arpdService = SpringUtils.getBean(ApscResearchProjectDataService.class);

	ApscTaskSchedule apscTaskSchedule = null;
	
	ApscTaskDetailSchedule apscTaskDetailSchedule=null;
	
	ApscResearchProjectData arpData = null;
	
	TextRankProcess trprocess_tit_cn = null;
	
	TextRankProcess trprocess_tit_en = null;
	
	
	public InsertKeywordOfProtect(ApscTaskSchedule taskSchedule) {
		trprocess_tit_cn = new TextRankProcess(Constants.LANGUAGE.CN, 2, 10, 0);
		trprocess_tit_en = new TextRankProcess(Constants.LANGUAGE.EN, 2, 10, 0);
		apscTaskSchedule=taskSchedule;
		apscTaskDetailSchedule = new ApscTaskDetailSchedule(apscTaskSchedule.getTaskId(), apscTaskSchedule.getBeginTime(), "003");
	}

	@SuppressWarnings({"unchecked" })
	public boolean insertKeyword() throws IOException {
		try {			
			ConfDomain ConfDomain=new ConfDomain();
			int limit = ConfDomain.getProject_limit();
			
			//查出基金表数据	        
	        List<ApscResearchProjectData> arpdList = arpdService.getarpdList(limit);
	        	 
	        apscTaskSchedule.setState("2");
	        apscScheduleService.update(apscTaskSchedule);
	     
	        apscTaskDetailSchedule.setSumRec(arpdList.size());
			apscTaskDetailSchedule.setFileId("0");
			apscTaskDetailSchedule.setTabName("apsc_research_project_data");
			apscTaskDetailSchedule.setUserId("");

			apscTaskDetailScheduleService.insert(apscTaskDetailSchedule);
			
	        add(arpdList ,limit);
	        
//			String updatesql1="update apsc_task_schedule set end_time='"+DateUtils.getCurrDateTimeStr()
//			+"',state='4' where task_id="+sche.getDetail_sche_list().get(0).get("task_id");
//			SqlUtil.UpdateOrDelete(updatesql1);//修改调度表
	        apscTaskSchedule.setEndTime(DateUtils.getCurrDateTimeStr());
			apscTaskSchedule.setState("4");
			apscTaskSchedule.setTaskId(apscTaskDetailSchedule.getTaskId());
			apscScheduleService.update(apscTaskSchedule);
			
//			String updatesql2="update apsc_task_detail_schedule set end_time='"+DateUtils.getCurrDateTimeStr()
//			+"',finish_rec='"+list.size()+"' where task_id="+sche.getDetail_sche_list().get(0).get("task_id");
//		    SqlUtil.UpdateOrDelete(updatesql2);//修改明细表
			apscTaskDetailSchedule.setEndTime(apscTaskSchedule.getEndTime());
		    apscTaskDetailScheduleService.update(apscTaskDetailSchedule);
		    
		    if (arpdList.size()<1) {
//		    	String del1="delete from apsc_task_schedule  where task_id="+sche.getDetail_sche_list().get(0).get("task_id");
//				SqlUtil.UpdateOrDelete(del1);//删除调度表
				
				apscScheduleService.delete(apscTaskSchedule);
				
//				String del2="delete from apsc_task_detail_schedule  where task_id="+sche.getDetail_sche_list().get(0).get("task_id");
//				SqlUtil.UpdateOrDelete(del2);//删除调度表
				
				apscTaskDetailScheduleService.delete(apscTaskDetailSchedule);
			}
		    return true;
			} catch (Exception e) {
//				sche.getSche_list().get(0).put("state", "3");
//				SqlUtils.prepareInsert(sche.getSche_list(), sche.getHeaders(), sche.getSche_table(),
//						new String[] { "end_time" });
				apscTaskSchedule.setState("3");
				apscScheduleService.update(apscTaskSchedule);
				e.printStackTrace();
				return false;
			}
        }
	@SuppressWarnings({ "rawtypes" })
	public void add(List<ApscResearchProjectData> list,int limit) throws IOException {
		//递归算法:先查询出limit条数据，进行更新；再查询limit条数据更新，若查询出来集合为空，则结束递归算法，否则继续查询
		 if (list.size()>0) {
	        	List<ApscResearchProjectData> newlist=new ArrayList<>();
	            //更新数据
	            for (ApscResearchProjectData map : list) {
	    			String pro_name=map.getProName();//调用取值方法,得到的数据赋给其他字段
	    			String ab_cn=map.getAbCn();
	    			String ab_en=map.getAbEn();
	    			String final_ab=map.getFinalAb();
	    			String keywords_cn=map.getKeywordsCn().toString().replace("。", "").replace(".", "").replace("；", ";").replace("'", "").replace("’", "").trim().replaceAll("\\\\","");;
	    			String keywords_en=map.getKeywordsEn().toString().replace("。", "").replace(".", "").replace("；", ";").replace("'", "").replace("’", "").trim().replaceAll("\\\\","");;
	    			//获取英文摘要关键字
	    			String final_ab2="";
	    	        String ab_en2="";
	    	        String ab_cn2="";
	    	        String pro_name2="";
	    	        
	    	        //生成停止词
	    	        String[] cnarray= keywords_cn.split(";");
	    	        String[] enarray= keywords_en.split(";");
	    			Set<String> stopwords=new HashSet<>();
    		        for (String string : cnarray) {
    					stopwords.add(string.toLowerCase());
    				}
    		        for (String string : enarray) {
    		        	stopwords.add(string.toLowerCase());
    		        }
    		        
    		        List<String> documents_tit = new ArrayList<>();//存放被提取的对象
    		        documents_tit.add(pro_name);
		   	        List<String> documents_ab_en = new ArrayList<>();//存放被提取的对象
		   	        documents_ab_en.add(ab_en);
		   	        List<String> documents_ab_cn = new ArrayList<>();//存放被提取的对象
		   	        documents_ab_cn.add(ab_cn);
		   	        List<String> documents_final_ab = new ArrayList<>();//存放被提取的对象
		   	        documents_final_ab.add(final_ab);
    		        List<Set<String>> final_keywords_tit_cn = null;//存放提取结果
	    	       //获取项目名称/标题-中文关键字;必须先中文后英文
	    			if (!pro_name.trim().equals("")) {
//	    				TextRankProcess trprocess_tit_cn = null;
//			   	        trprocess_tit_cn = new TextRankProcess(Constants.LANGUAGE.CN, 2, 10,0,stopwords);
	    				final_keywords_tit_cn = trprocess_tit_cn.calculateTextRank2(documents_tit, stopwords);
	    				for(String b : final_keywords_tit_cn.get(0)) {
	    					pro_name2+=b+";";
			   	        }
	    				if (!pro_name2.equals("")) {
	    					pro_name2=pro_name2.substring(0, pro_name2.length()-1);
	    				}
//	    				Map<String, Integer> title_keywords2 = kp_cn.analyseKeywords(pro_name, 2, 6, stopwords, null);
//	    				pro_name2=String.join(";", title_keywords2.keySet());
	    			}
	    			//去除存在的中文关键字
	    			String[] a_cnarray= pro_name2.split(";");
    		        for (String string : a_cnarray) {
    					stopwords.add(string.toLowerCase());
    				}
	    			//获取项目名称/标题-英文关键字
	    			if (!pro_name.trim().equals("")) {
	    				String pro_name3="";
//	    				TextRankProcess trprocess_tit_en = null;
//	    				trprocess_tit_en = new TextRankProcess(Constants.LANGUAGE.EN, 2, 10,0,stopwords);
	    				final_keywords_tit_cn = trprocess_tit_en.calculateTextRank2(documents_tit, stopwords);
	    				for(String b : final_keywords_tit_cn.get(0)) {
	    					pro_name3+=b+";";
			   	        }
	    				if (!pro_name3.equals("")) {
	    					pro_name3=pro_name3.substring(0, pro_name3.length()-1);
	    				}
//	    				Map<String, Integer> title_keywords2 = kp_en.analyseKeywords(pro_name, 2, 6, stopwords, null);
//	    				pro_name3=String.join(";", title_keywords2.keySet());
	    				pro_name2=pro_name2.equals("")?pro_name2:pro_name2+";";
	    				if (!pro_name2.equals("")&&pro_name3.equals("")) {//有无数据？有2加,：若3有/无-1;无2"":若3有/无
	    					pro_name2=pro_name2.substring(0, pro_name2.length()-1);
						} 
	    				pro_name2+=pro_name3;
	    			}
	    			if (pro_name2.length()>1000) {
	    				pro_name2=pro_name2.substring(0, 1000);
	    				pro_name2=pro_name2.substring(0, pro_name2.lastIndexOf(";"));
					}
	    			//去除标题中存在的关键字
	    			String[] proarray= pro_name2.split(";");
    		        for (String string : proarray) {
    					stopwords.add(string.toLowerCase());
    				}
    		        
    		        //获取英文摘要关键字
	    			if (!ab_en.trim().equals("")) {
//	    				TextRankProcess trprocess_tit_en = null;
//	    				trprocess_tit_en = new TextRankProcess(Constants.LANGUAGE.EN, 2, 10,0,stopwords);
	    				final_keywords_tit_cn = trprocess_tit_en.calculateTextRank2(documents_ab_en, stopwords);
	    				for(String b : final_keywords_tit_cn.get(0)) {
	    					ab_en2+=b+";";
			   	        }
	    				if (!ab_en2.equals("")) {
	    					ab_en2=ab_en2.substring(0, ab_en2.length()-1);
	    				}
//	    				Map<String, Integer> en_keywords = kp_en.analyseKeywords(ab_en, 2, 6, stopwords, null);
//	    				ab_en2=String.join(";", en_keywords.keySet());
	    			}
	    			if (ab_en2.length()>400) {
						ab_en2=ab_en2.substring(0, 400);
						ab_en2=ab_en2.substring(0, ab_en2.lastIndexOf(";")+1);
					}
	    			//去除英文摘要中存在的关键字
	    			String[] ab_enarray= ab_en2.split(";");
    		        for (String string : ab_enarray) {
    					stopwords.add(string.toLowerCase());
    				}
    		        
	    			//获取中文摘要关键字
	    			if (!ab_cn.trim().equals("")) {
//	    				TextRankProcess trprocess_tit_en = null;
//	    				trprocess_tit_en = new TextRankProcess(Constants.LANGUAGE.CN, 2, 10,0,stopwords);
	    				final_keywords_tit_cn = trprocess_tit_en.calculateTextRank2(documents_ab_cn, stopwords);
	    				for(String b : final_keywords_tit_cn.get(0)) {
	    					ab_cn2+=b+";";
			   	        }
	    				if (!ab_cn2.equals("")) {
	    					ab_cn2=ab_cn2.substring(0, ab_cn2.length()-1);
	    				}
//	    				Map<String, Integer> cn_keywords1 = kp_cn.analyseKeywords(ab_cn, 2, 6, stopwords, null);
//	    				ab_cn2=String.join(";", cn_keywords1.keySet());
	    			}
	    			if (ab_cn2.length()>300) {
	    				ab_cn2=ab_cn2.substring(0, 300);
	    				ab_cn2=ab_cn2.substring(0, ab_cn2.lastIndexOf(";")+1);
					}
	    			//去除中文摘要中存在的关键字
	    			String[] ab_cnarray= ab_cn2.split(";");
    		        for (String string : ab_cnarray) {
    					stopwords.add(string.toLowerCase());
    				}
    		        
	    			//获取结题摘要关键字
	    			if (!final_ab.trim().equals("")) {
//	    				TextRankProcess trprocess_tit_en = null;
//	    				trprocess_tit_en = new TextRankProcess(Constants.LANGUAGE.EN, 2, 10,0,stopwords);
	    				final_keywords_tit_cn = trprocess_tit_en.calculateTextRank2(documents_final_ab, stopwords);
	    				for(String b : final_keywords_tit_cn.get(0)) {
	    					final_ab2+=b+";";
			   	        }
	    				if (!final_ab2.equals("")) {
	    					final_ab2=final_ab2.substring(0, final_ab2.length()-1);
	    				}
//	    				Map<String, Integer> final_ab_keywords2 = kp_cn.analyseKeywords(final_ab, 2, 6, stopwords, null);
//	    				final_ab2=String.join(";", final_ab_keywords2.keySet());
	    			}
	    			if (final_ab2.length()>300) {
	    				final_ab2=final_ab2.substring(0, 300);
	    				final_ab2=final_ab2.substring(0, final_ab2.lastIndexOf(";"));
					}
	    			
	    			map.setProName(map.getProName().toString().replace("'", "''")) ;
	    			map.setAppName(map.getAppName().toString().replace("'", "''"));
	    			map.setProLeader(map.getProLeader().toString().replace("'", "''").replaceAll("\\\\","/"));
	    			map.setLeaderProfession(map.getLeaderProfession().toString().replace("'", "''"));
	    			map.setSupportInst(map.getSupportInst().toString().replace("'", "''"));
	    			map.setAbCn(map.getAbCn().toString().replace("'", "''"));
	    			map.setKeywordsCn(map.getKeywordsCn().toString().replace("'", "''"));
	    			map.setAbEn( map.getAbEn().toString().replace("'", "''"));
	    			map.setKeywordsEn( map.getKeywordsEn().toString().replace("'", "''"));
	    			map.setFinalAb( map.getFinalAb().toString().replace("'", "''"));
	    			map.setTxtname(map.getTxtname().toString().replace("'", "''"));
	    			map.setFundInst(map.getFundInst().toString().replace("'", "''"));
	    			map.setAppIdOne(map.getAppIdOne().toString().replace("'", "''"));
	    			map.setAppIdTwo(map.getAppIdTwo().toString().replace("'", "''"));
	    			map.setAppIdThree( map.getAppIdThree().toString().replace("'", "''"));
	    			map.setAppNameOne( map.getAppNameOne().toString().replace("'", "''"));
	    			map.setAppNameTwo( map.getAppNameTwo().toString().replace("'", "''"));
	    			map.setAppNameThree( map.getAppNameThree().toString().replace("'", "''")); 
	    			map.setTitleKeywords(pro_name2);
	    			if ((ab_cn.trim().equals("")||ab_cn.trim()==null)&&(ab_en.trim().equals("")||ab_en.trim()==null)&&(final_ab.trim().equals("")||final_ab.trim()==null)) {
	    				map.setAbstractKeywords("");
	    			}else {
	    				map.setAbstractKeywords(ab_en2+ab_cn2+final_ab2);
	    			}
	    			newlist.add(map);
	    		}
	            //插入数据库
	            String[] headers = new String[]{"id","appr_no","pro_name","pro_type","app_code","app_name","pro_leader",
	        			"leader_profession","support_inst","begin_date","begin_year","end_date","end_year","grants",
	        			"format_grants","ab_cn","keywords_cn","ab_en","keywords_en","final_ab","ori_link","txtname",
	        			"fund_inst","project_country","data_type","datasource","app_id_one","app_id_two","app_id_three",
	        			"app_name_one","app_name_two","app_name_three","title_keywords","abstract_keywords"};
//	            String insertsql=sqlMake(newlist, headers);
	            //System.out.println(insertsql);
	            
	            arpdService.insert(newlist);
	            	            
	            add(arpdService.getarpdList(limit),limit);
			}
	}
	

}
