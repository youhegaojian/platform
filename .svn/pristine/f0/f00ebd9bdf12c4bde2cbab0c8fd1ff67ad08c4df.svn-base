package com.liming.keyword;

import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Types;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.liming.domain.ScheduleDomain;
import com.liming.utils.DateUtils;
import com.liming.utils.PropertiesReader;
import com.liming.utils.SqlUtils;

import ch.qos.logback.core.db.dialect.DBUtil;

/** 专利 标题和摘要关键字分析
 *	获取任务表任务号（根据时间条件）
 *->遍历任务号
 *->获取对应数据（根据任务号）
 *-> 进行关键字提取
 * @author lcb
 */
public class InsertKeywordOfPatent {
	Calendar c = Calendar.getInstance();
	ScheduleDomain sche = null;
	
	public InsertKeywordOfPatent(String task_id) {
		sche = new ScheduleDomain("001", task_id);
	}

	@SuppressWarnings({ "unchecked" })
	public boolean insertKeyword(String taskid) throws IOException {
		try {
//		String updatenull="update apsc_analysis_patent set abstract_keywords=null,title_keywords=null WHERE \r\n" + 
//		"  abstract_keywords='' and title_keywords=''";
//		SqlUtil.UpdateOrDelete(updatenull);
		//查出基金表数据
		String conf= InsertKeywordOfPatent.class.getResource("/dbconf.properties").getPath();
		String date= PropertiesReader.getPatentDate(conf);
		String conf2= InsertKeywordOfPatent.class.getResource("/limit.properties").getPath();
		int limit= Integer.parseInt(PropertiesReader.getPatentLimit(conf2));
		boolean flag=false;String sql="";
		if (taskid.equals("")||taskid==null) {
			  sql= "select id,user_id from apsc_kgo_link where pl_type in ('中文专利','英文专利','科睿唯安') and download_time > '"+date+"'";
		} else {
			  sql= "select id,user_id from apsc_kgo_link where id='"+taskid+"'";
		}
		//String sql= "select id,user_id from apsc_kgo_link where id='201904122318034590010695'";//id='20190320142658101001' or id='201902220829512600000263'";//pl_type in ('中文专利','英文专利','科睿唯安') and download_time > '"+date+"'";
		//String sql= "select id,user_id from apsc_kgo_link where pl_type in ('中文专利','英文专利','科睿唯安') and download_time > '"+date+"'";
        List<Map<String, Object>> list=query(sql);
        System.out.println(list.size());
        KeywordsProcess kp_cn = new KeywordsProcess("cn");
        KeywordsProcess kp_en = new KeywordsProcess("en");
        
        for (int i = 0; i < list.size(); i++) {
			String id=list.get(i).get("id").toString();
			String patentsql="SELECT * from apsc_analysis_patent WHERE abstract_keywords is null and title_keywords is null and task_id="+id+" limit "+limit+"";//apsc_analysis_patent测试表apsc_analysis_patent_ext_copy
		    List<Map<String, Object>> patentlist=query(patentsql);
		    
		    if (patentlist.size()>0) {
		    	SqlUtils.prepareInsert(sche.getSche_list(), sche.getHeaders(), sche.getSche_table(), 
		    			new String[] {"state"});
		    	sche.getDetail_sche_list().get(0).put("sum_rec", patentlist.size());
		    	sche.getDetail_sche_list().get(0).put("file_id", id);
		    	sche.getDetail_sche_list().get(0).put("tab_name", "apsc_analysis_patent");
		    	sche.getDetail_sche_list().get(0).put("user_id",list.get(i).get("user_id"));
		    	SqlUtils.prepareInsert(sche.getDetail_sche_list(), sche.getDetail_headers(), sche.getDetail_table(), null);
		    	/*
			    	测试100条数据的速度
			    */	
			    //每offset条插一次
		    	if (patentlist != null && patentlist.size()>0) {
		    		int length = patentlist.size();
					int offset = Integer.parseInt(PropertiesReader.getPaperLimit(conf2));//100
					int n = length/offset;
					int y = length%offset;
					if(y!=0) {
						n=n+1;
					}
					if (length<=offset) {
						add(patentlist,patentsql,kp_cn,kp_en,sche, 0);
						System.out.println("---------插入 >> "+0+"----"+length*2+"<< ------------");
					}else {
						List<Map<String, Object>> _list = null;
						for(int i1=0;i1<n;i1++) {
							int end = ((i1+1)*offset)>length?length:((i1+1)*offset);
							_list = (patentlist).subList(i1*offset, end);
							add(_list,patentsql,kp_cn,kp_en,sche,0);
							//System.out.println(sql);
							System.out.println("---------插入 >> "+i1*offset*2+"----"+end*2+"<< ------------");
						}
					}
				}
				String updatesql1="update apsc_task_schedule set end_time='"+DateUtils.getCurrDateTimeStr()
				+"',state='4' where task_id="+sche.getDetail_sche_list().get(0).get("task_id");
				SqlUtils.UpdateOrDelete(updatesql1);//修改调度表
				String updatesql2="update apsc_task_detail_schedule set end_time='"+DateUtils.getCurrDateTimeStr()
				+"' where task_id="+sche.getDetail_sche_list().get(0).get("task_id")+" and file_id="+sche.getDetail_sche_list().get(0).get("file_id");
			    SqlUtils.UpdateOrDelete(updatesql2);//修改明细表
			    flag=true;
			}
			}
        if (!flag) {
        	String updatesql1="delete from apsc_task_schedule  where task_id="+sche.getDetail_sche_list().get(0).get("task_id");
			SqlUtils.UpdateOrDelete(updatesql1);//删除调度表
		}
//        String update ="update apsc_analysis_patent set abstract_keywords='',title_keywords='' WHERE \r\n" + 
//    			"  abstract_keywords=null and title_keywords=null";
//    	SqlUtil.UpdateOrDelete(update);
        	return true;
		} catch (Exception e) {
			sche.getSche_list().get(0).put("state", "3");
			SqlUtils.prepareInsert(sche.getSche_list(), sche.getHeaders(), sche.getSche_table(),
					new String[] { "end_time" });
			e.printStackTrace();
			return false;
		}
        }
	public void add(List<Map<String, Object>> list,String sql,KeywordsProcess kp_cn,KeywordsProcess kp_en,ScheduleDomain sche,int sum) throws IOException {
		//获取当前时间，若在0-22点，才执行
//		Date nowDate=new Date();
//        c.set(Calendar.HOUR_OF_DAY, 0);
//        c.set(Calendar.MINUTE, 0);
//        c.set(Calendar.SECOND, 0);
//        Date m12 = c.getTime();
//        c.set(Calendar.HOUR_OF_DAY, 23);
//        c.set(Calendar.MINUTE, 59);
//        c.set(Calendar.SECOND, 59);
//        Date m5 = c.getTime();
//        //System.out.println(nowDate+"--"+m12+"--"+m5);
//		if (nowDate.after(m12)&&nowDate.before(m5)) {
//			System.out.println("---------------在定时区间内---------------");
		//递归算法:先查询出limit条数据，进行更新；再查询limit条数据更新，若查询出来集合为空，则结束递归算法，否则继续查询
		 if (list.size()>0) {
	        	List<Map> newlist=new ArrayList<>();
	            //更新数据
	            for (Map<String, Object> map : list) {
	            	if (((String)map.get("desc_keywords"))==null) {
	            		map.put("desc_keywords", "");
	            	}
	    			String title=map.get("title")==null?"":map.get("title").toString();//调用取值方法,得到的数据赋给其他字段
	    			String abstract_=map.get("abstract_")==null?"":map.get("abstract_").toString();
	    			String desc_keywords=map.get("desc_keywords").toString();
	    			if (abstract_.length()>4096) {
	    				abstract_=abstract_.substring(0, 4096);
	    			}
	    			//获取英文摘要关键字
	    			String title2="";
	    	        String abstract_2="";
	    	        //生成停止词
	    	        String[] dearray= desc_keywords.split(";");
	    			Set<String> stopwords=new HashSet<>();
    		        for (String string : dearray) {
    					stopwords.add(string.toLowerCase());
    				}
	    			//获取标题-中文关键字--必须先中文后英文
	    			if (!title.trim().equals("")) {
	    				Map<String, Integer> title_keywords2 = kp_cn.analyseKeywords(title, 2, 6, stopwords, null);
	    				title2=String.join("|", title_keywords2.keySet());
	    			}
	    			//获取标题-英文关键字
	    			if (!title.trim().equals("")) {
	    				String title3="";
	    				Map<String, Integer> title_keywords2 = kp_en.analyseKeywords(title, 2, 6, stopwords, null);
	    				title3=String.join("|", title_keywords2.keySet());
	    				title2=title2.equals("")?title2:title2+"|";
	    				if (!title2.equals("")&&title3.equals("")) {//有无数据？有2加,：若3有/无-1;无2"":若3有/无
	    					title2=title2.substring(0, title2.length()-1);
						} 
	    				title2+=title3;
	    			}
	    			if (title2.length()>1024) {
	    				title2=title2.substring(0, 1024);
	    				title2=title2.substring(0, title2.lastIndexOf("|"));
					} 
	    			//去除标题中存在的关键字
	    			String a=title2.replace("|", ";");
	    			String[] aarray= a.split(";");
    		        for (String string : aarray) {
    					stopwords.add(string.toLowerCase());
    				}
	    			//获取摘要-中文关键字--必须先中文后英文
	    			if (!abstract_.trim().equals("")) {
	    				Map<String, Integer> title_keywords2 = kp_cn.analyseKeywords(abstract_, 2, 6, stopwords, null);
	    				abstract_2=String.join("|", title_keywords2.keySet());
	    			}
	    			//获取摘要-英文关键字
	    			if (!abstract_.trim().equals("")) {
	    				String abstract_3="";
	    				Map<String, Integer> title_keywords2 = kp_en.analyseKeywords(abstract_, 2, 6, stopwords, null);
	    				abstract_3=String.join("|", title_keywords2.keySet());
	    				abstract_2=abstract_2.equals("")?abstract_2:abstract_2+"|";
	    				if (!abstract_2.equals("")&&abstract_3.equals("")) {//有无数据？有2加,：若3有/无-1;无2"":若3有/无
	    					abstract_2=abstract_2.substring(0, abstract_2.length()-1);
						} 
	    				abstract_2+=abstract_3;
	    			}
	    			if (abstract_2.length()>2048) {
	    				abstract_2=abstract_2.substring(0, 2048);
	    				abstract_2=abstract_2.substring(0, abstract_2.lastIndexOf("|"));
					} 
	    			map.put("id", map.get("id")); 
	    			//map.put("publication_day", map.get("publication_day")); 
	    			map.put("title_keywords", title2);
	    			map.put("abstract_keywords", abstract_2);
	    			newlist.add(map);
	    		}
	            //插入数据库
	            //String[] headers = new String[]{"id","title_keywords","abstract_keywords"};
	            String[] headers = new String[]{"id","publication_day","title_keywords","abstract_keywords"};
	            String insertsql=sqlMake(newlist, headers);
	            //System.out.println(insertsql);
	            insert(insertsql);
	            
	            sum+=list.size();
	            String querysql2="select finish_rec from apsc_task_detail_schedule where task_id="+sche.getDetail_sche_list().get(0).get("task_id")+" and file_id="+sche.getDetail_sche_list().get(0).get("file_id");
			 	List<Map> clist2=SqlUtils.query(querysql2);
			 	int c2=Integer.parseInt(clist2.get(0).get("finish_rec").toString())+ newlist.size();
	            String updatesql2="update apsc_task_detail_schedule set finish_rec='"+c2+"',sum_rec='"+sum+"' where task_id="+sche.getDetail_sche_list().get(0).get("task_id")+" and file_id="+sche.getDetail_sche_list().get(0).get("file_id");
			    SqlUtils.UpdateOrDelete(updatesql2);//修改明细表完成数
			    
			    add(query(sql),sql,kp_cn,kp_en,sche,sum);
			}
//		 }else {
//			 System.out.println("---------------不在定时区间内---------------");
//			}
	}
	public String sqlMake(List<Map> list, String[] headers) {
    	StringBuffer sql = new StringBuffer();
    	sql.append("insert into apsc_analysis_patent(");
    	for (int i = 0; i < headers.length; i++) {
    		if (i < headers.length - 1) {
    			sql.append(headers[i]).append(",");
    		} else {
    			sql.append(headers[i]).append(") VALUES ");
    		}
    	}
    	
    	for (int i = 0; i < list.size(); i++) {
    		Map map = list.get(i);
    		sql.append("(");
    		for (int j = 0; j < headers.length; j++) {
    			if (j < headers.length - 1) {
    				sql.append("'");
    				sql.append(map.get(headers[j]).toString());
    				sql.append("',");
    			} else {
    				sql.append("'");
					sql.append(map.get(headers[j]).toString());
    				sql.append("'");
    			}
    		}
    		if(i < list.size()-1) {
    			sql.append("),");
    		}else {
    			sql.append(") on duplicate key update title_keywords = VALUES(title_keywords),abstract_keywords = VALUES(abstract_keywords)");
    		}
    	}
    	return sql.toString();
    }
	/**返回
	 * 查询到的字段名字段类型
     * 结果集list
	 * @param sql
	 * @return
	 */
    
	private List<Map<String, Object>> query(String sql) {
		Connection conn =DBUtil.getConn();//DBUtil.getConn("paper");
		Object a=null;
		List<Map<String, Object>> list=new ArrayList<>();
		try {
			conn.setAutoCommit(false);
			PreparedStatement  pst = (PreparedStatement) conn.prepareStatement(" ");
			// 添加执行SQL
			ResultSet rs=pst.executeQuery(sql);
			list=getListFromRs(rs);
			// 提交事务
			conn.commit();
			pst.close();
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return list;
	}
	 /** 
	  * 查询到的字段名字段类型
     * 得到结果集存储到list中 
     * @param rs 查询的结果集 
     * @return  
     * @throws SQLException 
     */  
    public static List<Map<String, Object>> getListFromRs(ResultSet rs) throws SQLException{  
        ResultSetMetaData md = rs.getMetaData();//得到结果集列的属性  
        int columns = md.getColumnCount();//得到记录有多少列  
        System.out.println("记录有多少列"+columns);
        int i;  
        List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();  
        while(rs.next()){  
            Map<String, Object> map = new HashMap<String, Object>();  
            for(i = 0; i < columns; i++){  
                map.put(md.getColumnName(i + 1), getValueByType(rs, md.getColumnType(i + 1), md.getColumnName(i + 1)));  
            }  
            list.add(map);  
        }  
        return list;  
    }  
    
    /**
     * 返回字段类型
     * @param rs 结果集
     * @param type 此列的 SQL 数据类型
     * @param name 此列的 SQL 字段名
     * @return
     * @throws SQLException
     */
    
    private static Object getValueByType(ResultSet rs, int type, String name) throws SQLException{  
        switch(type){  
            case Types.NUMERIC:  
                    return rs.getLong(name);                  
            case Types.VARCHAR:  
                //if(rs.getString(name)==null){  
                    //return "";  
                //}  
                return rs.getString(name);  
            case Types.DATE:  
                //if(rs.getDate(name)==null){  
                    //return System.currentTimeMillis();  
            //  }  
                return rs.getDate(name);  
            case Types.TIMESTAMP:  
                return rs.getTimestamp(name).toString().substring(0,rs.getTimestamp(name).toString().length()-2);  
            case Types.INTEGER:  
                return rs.getInt(name);  
            case Types.DOUBLE:  
                return rs.getDouble(name);  
            case Types.FLOAT:  
                return rs.getFloat(name);  
            case Types.BIGINT:  
                return rs.getLong(name);  
            default:  
                return rs.getObject(name);  
        }  
    } 
    /**
     * 执行插入数据
     * @param sql
     */
	private void insert(String sql) {
		Connection conn =DBUtil.getConn() ;//DBUtil.getConn("paper");
		try {
			conn.setAutoCommit(false);
			PreparedStatement  pst = (PreparedStatement) conn.prepareStatement(" ");
			// 添加执行SQL
			pst.addBatch(sql);
			// 执行操作
			int[] res = pst.executeBatch();
			System.out.println("---------------插入成功");
			// 提交事务
			conn.commit();
			pst.close();
			conn.close();
		} catch (SQLException e) {
			System.out.println("---------------插入失败");
//			System.out.println("sql ----"+sql);
			e.printStackTrace();
		}
	}
	

}
