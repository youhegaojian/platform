package com.liming.keyword;

import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Types;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.example.demo.domain.ScheduleDomain;
import com.example.demo.utils.DateUtils;
import com.example.demo.utils.PropertiesReader;
import com.example.demo.utils.SqlUtils;
import com.liming.utils.DBUtil; 

/**
 *	要执行的任务
 * @author lcb
 */
public class InsertKeywordOfProtect {
	Calendar c = Calendar.getInstance();
	public static void main(String[] args) throws IOException {
		InsertKeywordOfProtect insertKeyword2 = new InsertKeywordOfProtect("");
		insertKeyword2.insertKeyword();
	}
	ScheduleDomain sche = null;
	public InsertKeywordOfProtect(String task_id) {
		sche = new ScheduleDomain("003", task_id);
	}

	@SuppressWarnings({"unchecked" })
	public boolean insertKeyword() throws IOException {
		try {
		String conf2= InsertKeywordOfProtect.class.getResource("/limit.properties").getPath();
		int limit= Integer.parseInt(PropertiesReader.getProjectLimit(conf2));
		//查出基金表数据
        String sql="SELECT * from apsc_research_project_data where title_keywords is null and abstract_keywords is null limit "+limit+"";//apsc_research_project_data测试表apsc_research_project_data_copy
        List<Map<String, Object>> list=query(sql);
        KeywordsProcess kp_cn = new KeywordsProcess("cn");
        KeywordsProcess kp_en = new KeywordsProcess("en");
        
        SqlUtils.prepareInsert(sche.getSche_list(), sche.getHeaders(), sche.getSche_table(), 
    			new String[] {"state"});
    	sche.getDetail_sche_list().get(0).put("sum_rec", list.size());
    	sche.getDetail_sche_list().get(0).put("file_id", "0");
    	sche.getDetail_sche_list().get(0).put("tab_name", "apsc_research_project_data");
    	sche.getDetail_sche_list().get(0).put("user_id","");
    	SqlUtils.prepareInsert(sche.getDetail_sche_list(), sche.getDetail_headers(), sche.getDetail_table(), null);
    	/*
	    	测试100条数据的速度
	    */	
	    //每offset条插一次
    	if (list != null && list.size()>0) {
    		int length = list.size();
			int offset = Integer.parseInt(PropertiesReader.getPaperLimit(conf2));//100
			int n = length/offset;
			int y = length%offset;
			if(y!=0) {
				n=n+1;
			}
			if (length<=offset) {
				add(list,sql,kp_cn,kp_en);
				System.out.println("---------插入 >> "+0+"----"+length*2+"<< ------------");
			}else {
				List<Map<String, Object>> _list = null;
				for(int i1=0;i1<n;i1++) {
					int end = ((i1+1)*offset)>length?length:((i1+1)*offset);
					_list = (list).subList(i1*offset, end);
					add(_list,sql,kp_cn,kp_en);
					//System.out.println(sql);
					System.out.println("---------插入 >> "+i1*offset*2+"----"+end*2+"<< ------------");
				}
			}
		}
    	
    	
        add(list,sql,kp_cn,kp_en);
        
		String updatesql1="update apsc_task_schedule set end_time='"+DateUtils.getCurrDateTimeStr()
		+"',state='4' where task_id="+sche.getDetail_sche_list().get(0).get("task_id");
		SqlUtils.UpdateOrDelete(updatesql1);//修改调度表
		String updatesql2="update apsc_task_detail_schedule set end_time='"+DateUtils.getCurrDateTimeStr()
		+"',finish_rec='"+list.size()+"' where task_id="+sche.getDetail_sche_list().get(0).get("task_id");
	    SqlUtils.UpdateOrDelete(updatesql2);//修改明细表
	    if (list.size()==0) {
	    	String del1="delete from apsc_task_schedule  where task_id="+sche.getDetail_sche_list().get(0).get("task_id");
			SqlUtils.UpdateOrDelete(del1);//删除调度表
			String del2="delete from apsc_task_detail_schedule  where task_id="+sche.getDetail_sche_list().get(0).get("task_id");
			SqlUtils.UpdateOrDelete(del2);//删除调度表
		}
	    return true;
		} catch (Exception e) {
			sche.getSche_list().get(0).put("state", "3");
			SqlUtils.prepareInsert(sche.getSche_list(), sche.getHeaders(), sche.getSche_table(),
					new String[] { "end_time" });
			e.printStackTrace();
			return false;
		}
        }
	@SuppressWarnings({ "rawtypes" })
	public void add(List<Map<String, Object>> list,String sql,KeywordsProcess kp_cn,KeywordsProcess kp_en) throws IOException {
		//获取当前时间，若在0-22点，才执行
//		Date nowDate=new Date();
//        c.set(Calendar.HOUR_OF_DAY, 0);
//        c.set(Calendar.MINUTE, 0);
//        c.set(Calendar.SECOND, 0);
//        Date m12 = c.getTime();
//        c.set(Calendar.HOUR_OF_DAY, 23);
//        c.set(Calendar.MINUTE, 59);
//        c.set(Calendar.SECOND, 59);
//        Date m5 = c.getTime();
//        //System.out.println(nowDate+"--"+m12+"--"+m5);
//		if (nowDate.after(m12)&&nowDate.before(m5)) {
//			System.out.println("---------------在定时区间内---------------");
		//递归算法:先查询出limit条数据，进行更新；再查询limit条数据更新，若查询出来集合为空，则结束递归算法，否则继续查询
		 if (list.size()>0) {
	        	List<Map> newlist=new ArrayList<>();
	            //更新数据
	            for (Map<String, Object> map : list) {
	    			String pro_name=map.get("pro_name").toString();//调用取值方法,得到的数据赋给其他字段
	    			String ab_cn=map.get("ab_cn").toString();
	    			String ab_en=map.get("ab_en").toString();
	    			String final_ab=map.get("final_ab").toString();
	    			String keywords_cn=map.get("keywords_cn").toString().replace("。", "").replace(".", "").replace("；", ";").trim();
	    			String keywords_en=map.get("keywords_en").toString().replace(".", "").trim();
	    			//获取英文摘要关键字
	    			String final_ab2="";
	    	        String ab_en2="";
	    	        String ab_cn2="";
	    	        String pro_name2="";
	    	        
	    	        //生成停止词
	    	        String[] cnarray= keywords_cn.split(";");
	    	        String[] enarray= keywords_en.split(";");
	    			Set<String> stopwords=new HashSet<>();
    		        for (String string : cnarray) {
    					stopwords.add(string.toLowerCase());
    				}
    		        for (String string : enarray) {
    		        	stopwords.add(string.toLowerCase());
    		        }
    		        
	    	       //获取项目名称/标题-中文关键字；必须先中文后英文
	    			if (!pro_name.trim().equals("")) {
	    				Map<String, Integer> title_keywords2 = kp_cn.analyseKeywords(pro_name, 2, 6, stopwords, null);
	    				pro_name2=String.join(";", title_keywords2.keySet());
	    			}
	    			//获取项目名称/标题-英文关键字
	    			if (!pro_name.trim().equals("")) {
	    				String pro_name3="";
	    				Map<String, Integer> title_keywords2 = kp_en.analyseKeywords(pro_name, 2, 6, stopwords, null);
	    				pro_name3=String.join(";", title_keywords2.keySet());
	    				pro_name2=pro_name2.equals("")?pro_name2:pro_name2+";";
	    				if (!pro_name2.equals("")&&pro_name3.equals("")) {//有无数据？有2加,：若3有/无-1;无2"":若3有/无
	    					pro_name2=pro_name2.substring(0, pro_name2.length()-1);
						} 
	    				pro_name2+=pro_name3;
	    			}
	    			if (pro_name2.length()>1000) {
	    				pro_name2=pro_name2.substring(0, 1000);
	    				pro_name2=pro_name2.substring(0, pro_name2.lastIndexOf(";"));
					}
	    			//去除标题中存在的关键字
	    			String[] proarray= pro_name2.split(";");
    		        for (String string : proarray) {
    					stopwords.add(string.toLowerCase());
    				}
    		        
    		        //获取英文摘要关键字
	    			if (!ab_en.trim().equals("")) {
	    				Map<String, Integer> en_keywords = kp_en.analyseKeywords(ab_en, 2, 6, stopwords, null);
	    				ab_en2=String.join(";", en_keywords.keySet());
	    			}
	    			if (ab_en2.length()>400) {
						ab_en2=ab_en2.substring(0, 400);
						ab_en2=ab_en2.substring(0, ab_en2.lastIndexOf(";")+1);
					}
	    			//去除英文摘要中存在的关键字
	    			String[] ab_enarray= ab_en2.split(";");
    		        for (String string : ab_enarray) {
    					stopwords.add(string.toLowerCase());
    				}
    		        
	    			//获取中文摘要关键字
	    			if (!ab_cn.trim().equals("")) {
	    				Map<String, Integer> cn_keywords1 = kp_cn.analyseKeywords(ab_cn, 2, 6, stopwords, null);
	    				ab_cn2=String.join(";", cn_keywords1.keySet());
	    			}
	    			if (ab_cn2.length()>300) {
	    				ab_cn2=ab_cn2.substring(0, 300);
	    				ab_cn2=ab_cn2.substring(0, ab_cn2.lastIndexOf(";")+1);
					}
	    			//去除中文摘要中存在的关键字
	    			String[] ab_cnarray= ab_cn2.split(";");
    		        for (String string : ab_cnarray) {
    					stopwords.add(string.toLowerCase());
    				}
    		        
	    			//获取结题摘要关键字
	    			if (!final_ab.trim().equals("")) {
	    				Map<String, Integer> final_ab_keywords2 = kp_cn.analyseKeywords(final_ab, 2, 6, stopwords, null);
	    				final_ab2=String.join(";", final_ab_keywords2.keySet());
	    			}
	    			if (final_ab2.length()>300) {
	    				final_ab2=final_ab2.substring(0, 300);
	    				final_ab2=final_ab2.substring(0, final_ab2.lastIndexOf(";"));
					}
	    			
	    			map.put("pro_name", map.get("pro_name").toString().replace("'", "''"));
	    			map.put("app_name", map.get("app_name").toString().replace("'", "''"));
	    			map.put("pro_leader", map.get("pro_leader").toString().replace("'", "''").replaceAll("\\\\","/"));
	    			map.put("leader_profession", map.get("leader_profession").toString().replace("'", "''"));
	    			map.put("support_inst", map.get("support_inst").toString().replace("'", "''"));
	    			map.put("ab_cn", map.get("ab_cn").toString().replace("'", "''"));
	    			map.put("keywords_cn", map.get("keywords_cn").toString().replace("'", "''"));
	    			map.put("ab_en", map.get("ab_en").toString().replace("'", "''"));
	    			map.put("keywords_en", map.get("keywords_en").toString().replace("'", "''"));
	    			map.put("final_ab", map.get("final_ab").toString().replace("'", "''"));
	    			map.put("txtname", map.get("txtname").toString().replace("'", "''"));
	    			map.put("fund_inst", map.get("fund_inst").toString().replace("'", "''"));
	    			map.put("app_id_one", map.get("app_id_one").toString().replace("'", "''"));
	    			map.put("app_id_two", map.get("app_id_two").toString().replace("'", "''"));
	    			map.put("app_id_three", map.get("app_id_three").toString().replace("'", "''"));
	    			map.put("app_name_one", map.get("app_name_one").toString().replace("'", "''"));
	    			map.put("app_name_two", map.get("app_name_two").toString().replace("'", "''"));
	    			map.put("app_name_three", map.get("app_name_three").toString().replace("'", "''")); 
	    			map.put("title_keywords", pro_name2);
	    			if ((ab_cn.trim().equals("")||ab_cn.trim()==null)&&(ab_en.trim().equals("")||ab_en.trim()==null)&&(final_ab.trim().equals("")||final_ab.trim()==null)) {
	    				map.put("abstract_keywords", "");
	    			}else {
	    			    map.put("abstract_keywords", ab_en2+ab_cn2+final_ab2);
	    			}
	    			newlist.add(map);
	    		}
	            //插入数据库
	            String[] headers = new String[]{"id","appr_no","pro_name","pro_type","app_code","app_name","pro_leader",
	        			"leader_profession","support_inst","begin_date","begin_year","end_date","end_year","grants",
	        			"format_grants","ab_cn","keywords_cn","ab_en","keywords_en","final_ab","ori_link","txtname",
	        			"fund_inst","project_country","data_type","datasource","app_id_one","app_id_two","app_id_three",
	        			"app_name_one","app_name_two","app_name_three","title_keywords","abstract_keywords"};
	            String insertsql=sqlMake(newlist, headers);
	            //System.out.println(insertsql);
	            insert(insertsql);
	            add(query(sql),sql,kp_cn,kp_en);
			}
//		 }else {
//			 System.out.println("---------------不在定时区间内---------------");
//			}
	}
	@SuppressWarnings({ "rawtypes" })
	public String sqlMake(List<Map> list, String[] headers) {
    	StringBuffer sql = new StringBuffer();
    	sql.append("replace into apsc_research_project_data(");//apsc_research_project_data_copy
    	for (int i = 0; i < headers.length; i++) {
    		if (i < headers.length - 1) {
    			sql.append(headers[i]).append(",");
    		} else {
    			sql.append(headers[i]).append(") value ");
    		}
    	}
    	
    	for (int i = 0; i < list.size(); i++) {
    		Map map = list.get(i);
    		sql.append("(");
    		for (int j = 0; j < headers.length; j++) {
    			if (j < headers.length - 1) {
    				sql.append("'");
    				sql.append(map.get(headers[j]).toString());
    				sql.append("',");
    			} else {
    				sql.append("'");
					sql.append(map.get(headers[j]).toString());
    				sql.append("'");
    			}
    		}
    		if(i < list.size()-1) {
    			sql.append("),");
    		}else {
    			sql.append(")");
    		}
    	}
    	return sql.toString();
    }
	private List<Map<String, Object>> query(String sql) {
		Connection conn =DBUtil.getConn() ;//DBUtil.getConn("paper");
		Object a=null;
		List<Map<String, Object>> list=new ArrayList<>();
		try {
			conn.setAutoCommit(false);
			PreparedStatement  pst = (PreparedStatement) conn.prepareStatement(" ");
			// 添加执行SQL
			ResultSet rs=pst.executeQuery(sql);
			list=getListFromRs(rs);
			// 提交事务
			conn.commit();
			pst.close();
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return list;
	}
	 /** 
     * 得到结果集存储到list中 
     * @param rs 查询的结果集 
     * @return  
     * @throws SQLException 
     */  
    public static List<Map<String, Object>> getListFromRs(ResultSet rs) throws SQLException{  
        ResultSetMetaData md = rs.getMetaData();//得到结果集列的属性  
        int columns = md.getColumnCount();//得到记录有多少列  
        int i;  
        List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();  
        while(rs.next()){  
            Map<String, Object> map = new HashMap<String, Object>();  
            for(i = 0; i < columns; i++){  
                map.put(md.getColumnName(i + 1), getValueByType(rs, md.getColumnType(i + 1), md.getColumnName(i + 1)));  
            }  
            list.add(map);  
        }  
        return list;  
    }  
    private static Object getValueByType(ResultSet rs, int type, String name) throws SQLException{  
        switch(type){  
            case Types.NUMERIC:  
                    return rs.getLong(name);                  
            case Types.VARCHAR:  
                //if(rs.getString(name)==null){  
                    //return "";  
                //}  
                return rs.getString(name);  
            case Types.DATE:  
                //if(rs.getDate(name)==null){  
                    //return System.currentTimeMillis();  
            //  }  
                return rs.getDate(name);  
            case Types.TIMESTAMP:  
                return rs.getTimestamp(name).toString().substring(0,rs.getTimestamp(name).toString().length()-2);  
            case Types.INTEGER:  
                return rs.getInt(name);  
            case Types.DOUBLE:  
                return rs.getDouble(name);  
            case Types.FLOAT:  
                return rs.getFloat(name);  
            case Types.BIGINT:  
                return rs.getLong(name);  
            default:  
                return rs.getObject(name);  
        }  
    }  
	private void insert(String sql) {
		Connection conn =DBUtil.getConn() ;//DBUtil.getConn("paper");
		try {
			conn.setAutoCommit(false);
			PreparedStatement  pst = (PreparedStatement) conn.prepareStatement(" ");
			// 添加执行SQL
			pst.addBatch(sql);
			// 执行操作
			int[] res = pst.executeBatch();
			System.out.println("---------------插入成功");
			// 提交事务
			conn.commit();
			pst.close();
			conn.close();
		} catch (SQLException e) {
			System.out.println("---------------插入失败");
//			System.out.println("sql ----"+sql);
			e.printStackTrace();
		}
	}
	

}
