package com.liming.utils;

import edu.stanford.nlp.io.IOUtils;
import edu.stanford.nlp.ling.CoreAnnotations.*;
import edu.stanford.nlp.ling.CoreLabel;
import edu.stanford.nlp.pipeline.Annotation;
import edu.stanford.nlp.pipeline.StanfordCoreNLP;
import edu.stanford.nlp.util.CoreMap;

import java.io.*;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class RegularExpressionProcess {

    /**
     * sentences的语言类型
     *     cn - 中文
     *     en - 英文
     */
    private String lang = "en";
    private Set<String> stopWords = null;
    private StanfordCoreNLP pipeline = null;

    public RegularExpressionProcess(String lang) {
        if("cn".equals(lang.toLowerCase()) || "chinese".equals(lang.toLowerCase())) {
            this.lang = "cn";
        }
        stopWords = loadStopWords("dict/stopwords");
        try {
            Properties props = new Properties();
            props.load(IOUtils.readerFromString("config/CoreNLP-english.properties"));
            if("cn".equals(lang)) {
                props.load(IOUtils.readerFromString("config/CoreNLP-chinese.properties"));
            }
            this.pipeline = new StanfordCoreNLP(props);
        } catch (IOException e) {
            System.err.println("加载" + ("cn".equals(this.lang) ? "中文" : "英文") + "语言模型失败！\n" + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * 加载停用词
     * @param stopWordsFile : 停用词文件URL
     * @return : 停用词列表
     */
    private Set<String> loadStopWords(String stopWordsFile) {
        Set<String> stopWords = new HashSet<>();
        BufferedReader bufferedReader = null;
        try {
            bufferedReader = new BufferedReader(IOUtils.readerFromString(stopWordsFile));
            String line = null;
            while((line = bufferedReader.readLine()) != null) {
                stopWords.add(line.trim());
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if(bufferedReader != null) {
                    bufferedReader.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return stopWords;
    }

    /**
     * 提取关键词
     * @param documents        ：要提取关键词的文本
     * @param wordsMin         ：最小单词长度
     * @param wordsMax         ：最大单词长度
     * @param alias_dictionary ：关联词
     * @return 关键词列表
     */
    public Map<String, Integer> analyseKeywords(String documents, int wordsMin, int wordsMax, Map<String, String> alias_dictionary) {
        // 关键词
        Map<String, Integer> keywords = new HashMap<>();

        Annotation document = new Annotation(documents);
        this.pipeline.annotate(document);

        // 句子
        List<CoreMap> sentences = document.get(SentencesAnnotation.class);
        // 词性
        List<String> poss = new ArrayList<>();
        // 词形
        List<String> lemmas = new ArrayList<>();

        for (CoreMap sentence : sentences) {
            for (CoreLabel token : sentence.get(TokensAnnotation.class)) {
                poss.add(token.get(PartOfSpeechAnnotation.class));
                lemmas.add(token.get(LemmaAnnotation.class));
            }
            String sentenceWithPos = "";
            for (int i = 0, len = lemmas.size(); i < len; i++) {
                String key = lemmas.get(i);
                String value = poss.get(i);
                // 去除停用词
                /**
                if (stopWords != null && stopWords.contains(key)) {
                    continue;
                }
                 */
                sentenceWithPos += key + "/" + value + " ";
            }

            // 提取关键词
            String word = "(?:[\\w]+[-]*[\\w]*)";
            String posType = "NN([PS]?)".toLowerCase();
            if("cn".equals(lang)) {
                word = "(?:[\\u4E00-\\u9FA5]+)";
            }
            // 名词正则
            String nounPTN = word + "/" + posType;
            // wordsMin 到 wordsMax 个名词词组正则
            String nounGroupPTN = "(?:" + nounPTN + "\\s+){" + wordsMin + "," + wordsMax + "}";
            // 形容词正则
            String adjPTN = "(?:" + word + "/(VBG|JJ([RS]?))\\s+)";
            // 关键词识别正则
            String phrasePTN = "(" + adjPTN + "*" + nounGroupPTN + ")";
            Pattern phrasePattern = Pattern.compile(phrasePTN.toLowerCase());
            Matcher phraseMatcher = phrasePattern.matcher(sentenceWithPos.toLowerCase());
            while (phraseMatcher.find()) {
                String phrase = phraseMatcher.group(1).replaceAll("/" + posType + "|/vbg|/jj", "").trim();
                if("cn".equals(this.lang)) {
                    phrase = phrase.replaceAll(" ", "");
                }
                // 替换关联词
                if (alias_dictionary != null && alias_dictionary.containsKey(phrase)) {
                    phrase = alias_dictionary.get(phrase);
                }
                if(keywords.containsKey(phrase)) {
                    // 存在, 在原有记录上数量 + 1
                    keywords.put(phrase, keywords.get(phrase) + 1);
                } else {
                    // 不存在, 判断是否合并
                    boolean shouldMerge = false;
                    String shouldMergeKey = "";
                    for(String key : keywords.keySet()) {
                        if(key.contains(phrase) || phrase.contains(key)) {
                            shouldMergeKey = key;
                            shouldMerge = true;
                        }
                    }
                    // 合并重复关键词
                    if(!shouldMerge) {
                        keywords.put(phrase, 1);
                    } else {
                        if(shouldMergeKey.contains(phrase)) {
                            keywords.put(phrase, keywords.get(shouldMergeKey) + 1);
                            keywords.remove(shouldMergeKey);
                        }
                        if(phrase.contains(shouldMergeKey)) {
                            keywords.put(shouldMergeKey, keywords.get(shouldMergeKey) + 1);
                        }
                    }
                }
            }
        }
        return keywords;
    }

}
