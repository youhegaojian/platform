package com.liming.service.impl;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.liming.domain.ApscKgoLink;
import com.liming.mapper.ApscKgoLinkMapper;
import com.liming.service.ApscKgoLinkService;

import tk.mybatis.mapper.entity.Example;
@Service 
public class ApscKgoLinkServiceImpl implements ApscKgoLinkService{
	
	@Autowired
	private ApscKgoLinkMapper aklmapper;
	
	@Override
	@Transactional(propagation = Propagation.SUPPORTS)
	public List<ApscKgoLink> getKgoList(String taskid) {
		Example example = new Example(ApscKgoLink.class);
		Example.Criteria criteria = example.createCriteria();
		criteria.andEqualTo("id", taskid);
		
		List<ApscKgoLink> list = aklmapper.selectByExample(example);
		return list;
	}
	
	@Override
	@Transactional(propagation = Propagation.SUPPORTS)
	public List<ApscKgoLink> getKgoListByDate(String date) {		
		Example example = new Example(ApscKgoLink.class);
		Example.Criteria criteria = example.createCriteria();
		String[] tempStrings = {"WOS","中文期刊论文","学位论文","会议论文","英文期刊论文","endnote","noteexpress","refworks"};
		List<String> tempList = Arrays.asList(tempStrings);
		criteria.andIn("plType", tempList);
		criteria.andGreaterThanOrEqualTo("downloadTime", date);
		List<ApscKgoLink> list = aklmapper.selectByExample(example);
		return list;
	}
	
	@Override
	public List<ApscKgoLink> getPaperList(ApscKgoLink apscKgoLink) {

		List<ApscKgoLink> list = aklmapper.getPaperList(apscKgoLink);
		return list;
	}
	
	@Override
	public List<ApscKgoLink> getPatentList(ApscKgoLink apscKgoLink) {
//		Example example = new Example(ApscKgoLink.class);
//		Example.Criteria criteria = example.createCriteria();
//		String[] tempStrings = {"科睿唯安","中文专利","英文专利"};
//		List<String> tempList = Arrays.asList(tempStrings);
//		criteria.andIn("plType", tempList);
//		criteria.andGreaterThanOrEqualTo("downloadTime", apscKgoLink.getDownloadTime());
//		if (apscKgoLink.getId()!=null  && !"".equals(apscKgoLink.getId())) {
//			criteria.andEqualTo("id", apscKgoLink.getId());
//		}
		List<ApscKgoLink> list = aklmapper.getPatentList(apscKgoLink);
		return list;
	}

}
