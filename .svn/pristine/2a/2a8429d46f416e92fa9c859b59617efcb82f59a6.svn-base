package com.liming.keyword;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.annotation.PostConstruct;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.liming.domain.ApscAnalysisPatent;
import com.liming.domain.ApscKgoLink;
import com.liming.domain.ApscPaperAnalyse;
import com.liming.domain.ApscPaperAnalyseExt;
import com.liming.domain.ApscTaskDetailSchedule;
import com.liming.domain.ApscTaskSchedule;
import com.liming.domain.ConfDomain;
import com.liming.service.ApscAnalysisPatentService;
import com.liming.service.ApscKgoLinkService;
import com.liming.service.ApscTaskDetailScheduleService;
import com.liming.service.ApscTaskScheduleService;
import com.liming.utils.Constants;
import com.liming.utils.DateUtils;
import com.liming.utils.RegexpFilter;
import com.liming.utils.SpringUtils;
import com.liming.utils.TextRankProcess;

/**
 * 专利 标题和摘要关键字分析 获取任务表任务号（根据时间条件） ->遍历任务号 ->获取对应数据（根据任务号） -> 进行关键字提取
 * 
 * @author lcb
 */ 
public class InsertKeywordOfPatent {

	private ApscAnalysisPatentService patentService = SpringUtils.getBean(ApscAnalysisPatentService.class);
	
	private ApscTaskScheduleService taskScheduleService = SpringUtils.getBean(ApscTaskScheduleService.class);
	
	private ApscTaskDetailScheduleService taskDetailScheduleService = SpringUtils.getBean(ApscTaskDetailScheduleService.class);
	
	private ApscKgoLinkService apscKgoLinkService = SpringUtils.getBean(ApscKgoLinkService.class);
	
	private ApscKgoLink apscKgoLink=null;
	
	private ApscTaskSchedule apscTaskSchedule = null;
	
	private ApscTaskDetailSchedule apscTaskDetailSchedule = null;
	
	TextRankProcess trprocess_tit_cn = null;
	
	TextRankProcess trprocess_tit_en = null;
	
	
	public InsertKeywordOfPatent(){}
	
	public InsertKeywordOfPatent(ApscTaskSchedule taskSchedule) {
		apscTaskSchedule = taskSchedule;
		trprocess_tit_cn = new TextRankProcess(Constants.LANGUAGE.CN, 2, 6, 10);
		trprocess_tit_en = new TextRankProcess(Constants.LANGUAGE.EN, 2, 5, 10);   
		apscTaskDetailSchedule = new ApscTaskDetailSchedule(apscTaskSchedule.getTaskId(), apscTaskSchedule.getBeginTime(), "001");
		apscKgoLink=new ApscKgoLink();
	}
	
	public boolean insertKeyword(ApscTaskSchedule apscTaskSchedule) throws IOException {
		try {
			// 查出基金表数据
			System.out.println("进入insertkeyword------------------------------------");
			ConfDomain ConfDomain=new ConfDomain();
			String date=ConfDomain.getPatent_date();
			SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			
			apscKgoLink.setDownloadTime(df.parse(date));
			//前端获取taskid,作为kgo_link的id 查询条件
			apscKgoLink.setId(apscTaskSchedule.getTaskid());
			
			List<ApscKgoLink> kgoLists=apscKgoLinkService.getPatentList(apscKgoLink);
			System.out.println(kgoLists.size()+"        +++=====   insertKeyword");
			
			for (int i = 0; i < kgoLists.size(); i++) {
				String id = kgoLists.get(i).getId();
				String pl_type=kgoLists.get(i).getPlType();

				List<ApscAnalysisPatent> patentListByTaskId = patentService.getPatentList(id);
				//修改state的值为 2 正在计算
				setTaskState("2");

				if (patentListByTaskId.size() > 0) {
					//patentListByTaskId长度>0，往作业调度明细表中插一条数据，若=0，没有意义
					apscTaskDetailSchedule.setSumRec(patentListByTaskId.size());
					apscTaskDetailSchedule.setFileId(id);
					apscTaskDetailSchedule.setTabName("apsc_analysis_patent");
					apscTaskDetailSchedule.setUserId(kgoLists.get(i).getUserId());
					apscTaskDetailSchedule.setBeginTime(DateUtils.getCurrDateTimeStr());
					if (apscTaskDetailSchedule.getFinishRec() > 0) {
						apscTaskDetailSchedule.setFinishRec(0);
					}
					taskDetailScheduleService.insert(apscTaskDetailSchedule);
					
					System.out.println("apscTaskDetailSchedule++++++++++++++++++++++++++++++++++++");
										
					if (patentListByTaskId != null && patentListByTaskId.size()>0) {
						int length = patentListByTaskId.size();
						int offset = 1000;
						int n = length/offset;
						int y = length%offset;
						if(y != 0) {
							n = n + 1;
						}
						if(length > offset) {
							List<ApscAnalysisPatent> _list = null;
							for(int j=0; j<n; j++) {
								int end = ((j + 1) * offset) > length ? length : ((j + 1) * offset);
								_list = patentListByTaskId.subList(j * offset, end);
								add(_list, apscTaskDetailSchedule, pl_type, end);
								System.out.println("---------插入 >> "+j*offset+"----"+end+"<< ------------");
							}
						}else {
							add(patentListByTaskId, apscTaskDetailSchedule, pl_type, length);
							System.out.println("---------插入 >> "+0+"----"+length+"<< ------------");
						}
					}
					
					apscTaskDetailSchedule.setEndTime(DateUtils.getCurrDateTimeStr());
					taskDetailScheduleService.update(apscTaskDetailSchedule);
				}				
			}
			
			setTaskState("4");

			return true;
		} catch (Exception e) {
			setTaskState("3");
			
			e.printStackTrace();
			return false;
		}
	}

	
	public void setTaskState(String state) {
		apscTaskSchedule.setEndTime(DateUtils.getCurrDateTimeStr());
		apscTaskSchedule.setState(state);
		apscTaskSchedule.setTaskId(apscTaskDetailSchedule.getTaskId());
		taskScheduleService.update(apscTaskSchedule);
	}
	
	
	public void add(List<ApscAnalysisPatent> list,ApscTaskDetailSchedule apscTaskDetailSchedule, String pl_type, int length
			 ) throws IOException {
		if (list.size() > 0) {
			List<ApscAnalysisPatent> patentlist=new ArrayList<>();
			
			List<String> documents_tit = new ArrayList<>();//存放被提取的对象
        	List<String> documents_ab = new ArrayList<>();//存放被提取的对象
        	
        	String title = "";
        	String abstract_ = "";
        	
			// 更新数据
			for (ApscAnalysisPatent patent : list) {
				title = patent.getTitle() == null ? "" : patent.getTitle();// 调用取值方法,得到的数据赋给其他字段
				abstract_ = patent.getAbstract() == null ? "" : patent.getAbstract();
				
				title = RegexpFilter.stringFilter(title);
    			abstract_ = RegexpFilter.stringFilter(abstract_);
				
				if (!"".equals(title.trim())) {
					documents_tit.add(title);
				} else {
					documents_tit.add("NULL");
				}
				if (!"".equals(abstract_.trim())) {
					documents_ab.add(abstract_);
				} else {
					documents_ab.add("NULL");
				}			
			}
			
			List<Set<String>> final_keywords_tit_cn = null;
            List<Set<String>> final_keywords_ab_cn = null;
            List<Set<String>> final_keywords_tit_en = null;
            List<Set<String>> final_keywords_ab_en = null;
			if ("中文专利".equals(pl_type)) {
				final_keywords_tit_cn = generateCNTitleKeywords(documents_tit);
				final_keywords_ab_cn = generateCNAbstractKeywords(documents_ab);
				for (int i=0; i<final_keywords_tit_cn.size(); i++) {
					List<ApscAnalysisPatent> patentlistTitle = getPatentListTile(final_keywords_tit_cn.get(i), list.get(i));
					List<ApscAnalysisPatent> patentlistAbstract = getPatentListAbstract(final_keywords_ab_cn.get(i), list.get(i));
					patentlist.addAll(patentlistTitle);
					patentlist.addAll(patentlistAbstract);
				}
			} else {
				final_keywords_tit_en = generateENTitleKeywords(documents_tit);
				final_keywords_ab_en = generateENAbstractKeywords(documents_ab);
				for (int i=0; i<final_keywords_tit_en.size(); i++) {
					List<ApscAnalysisPatent> patentlistTitle = getPatentListTile(final_keywords_tit_en.get(i), list.get(i));
					List<ApscAnalysisPatent> patentlistAbstract = getPatentListAbstract(final_keywords_ab_en.get(i), list.get(i));
					patentlist.addAll(patentlistTitle);
					patentlist.addAll(patentlistAbstract);
				}
			}
			
			// 插入数据库
			if (patentlist.size() > 0) {
				patentService.insertPatentList(patentlist);
			}
	
			apscTaskDetailSchedule.setFinishRec(length);
			taskDetailScheduleService.update(apscTaskDetailSchedule);			
		}
	}
	
	public List<Set<String>> generateCNTitleKeywords(List<String> documents_tit) {
		List<Set<String>> final_keywords_tit_cn = null;
		final_keywords_tit_cn = trprocess_tit_cn.calculateTextRank2(documents_tit, new HashSet<>());
		return final_keywords_tit_cn;
	}
	
	public List<Set<String>> generateCNAbstractKeywords(List<String> documents_ab) {
		List<Set<String>> final_keywords_ab_cn = trprocess_tit_cn.calculateTextRank2(documents_ab, new HashSet<>());
		return final_keywords_ab_cn;
	}
	
	public List<Set<String>> generateENTitleKeywords(List<String> documents_tit) {
		List<Set<String>> final_keywords_tit_en = null;
		final_keywords_tit_en = trprocess_tit_en.calculateTextRank2(documents_tit, new HashSet<>());
		return final_keywords_tit_en;
	}
	
	public List<Set<String>> generateENAbstractKeywords(List<String> documents_ab) {
		List<Set<String>> final_keywords_ab_en = trprocess_tit_en.calculateTextRank2(documents_ab, new HashSet<>());
		return final_keywords_ab_en;
	}
	
	public List<ApscAnalysisPatent> getPatentListTile(Set<String> titleSet, ApscAnalysisPatent apscAnalysisPatent) {
		List<ApscAnalysisPatent> patentlist_title=new ArrayList<>();		
		String desc_keywords = apscAnalysisPatent.getDescKeywords() == null ? "" : apscAnalysisPatent.getDescKeywords().trim();
		String desc_keywordsArr[] = desc_keywords.split(";|\\|");
		titleSet.removeAll(Arrays.asList(desc_keywordsArr));
		String title_keywords = String.join("|", titleSet);
		apscAnalysisPatent.setTitleKeywords(title_keywords);
		patentlist_title.add(apscAnalysisPatent);
		return patentlist_title;
	}
	
	public List<ApscAnalysisPatent> getPatentListAbstract(Set<String> abstractSet, ApscAnalysisPatent apscAnalysisPatent) {	
		List<ApscAnalysisPatent> patentlist_abstract=new ArrayList<>();
		String desc_keywords = apscAnalysisPatent.getDescKeywords() == null ? "" : apscAnalysisPatent.getDescKeywords().trim();
		String desc_keywordsArr[] = desc_keywords.split(";|\\|");
		abstractSet.removeAll(Arrays.asList(desc_keywordsArr));
		String abstract_keywords = String.join("|", abstractSet);
		apscAnalysisPatent.setAbstractKeywords(abstract_keywords);
		patentlist_abstract.add(apscAnalysisPatent);
		return patentlist_abstract;
	}
	
}
